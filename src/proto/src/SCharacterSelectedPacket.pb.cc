// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SCharacterSelectedPacket.proto

#include "Proto/SCharacterSelectedPacket.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Avalon {
namespace Network {
namespace Packets {
namespace Character {
PROTOBUF_CONSTEXPR MapInfo::MapInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tilesetsdata_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.atlas_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.directory_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instanceid_)*/nullptr
  , /*decltype(_impl_.mapid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MapInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapInfoDefaultTypeInternal() {}
  union {
    MapInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapInfoDefaultTypeInternal _MapInfo_default_instance_;
PROTOBUF_CONSTEXPR SCharacterSelectedPacket::SCharacterSelectedPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.character_)*/nullptr
  , /*decltype(_impl_.map_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SCharacterSelectedPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SCharacterSelectedPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SCharacterSelectedPacketDefaultTypeInternal() {}
  union {
    SCharacterSelectedPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SCharacterSelectedPacketDefaultTypeInternal _SCharacterSelectedPacket_default_instance_;
}  // namespace Character
}  // namespace Packets
}  // namespace Network
}  // namespace Avalon
static ::_pb::Metadata file_level_metadata_SCharacterSelectedPacket_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_SCharacterSelectedPacket_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_SCharacterSelectedPacket_2eproto = nullptr;

const uint32_t TableStruct_SCharacterSelectedPacket_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Avalon::Network::Packets::Character::MapInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Avalon::Network::Packets::Character::MapInfo, _impl_.mapid_),
  PROTOBUF_FIELD_OFFSET(::Avalon::Network::Packets::Character::MapInfo, _impl_.instanceid_),
  PROTOBUF_FIELD_OFFSET(::Avalon::Network::Packets::Character::MapInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::Avalon::Network::Packets::Character::MapInfo, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::Avalon::Network::Packets::Character::MapInfo, _impl_.atlas_),
  PROTOBUF_FIELD_OFFSET(::Avalon::Network::Packets::Character::MapInfo, _impl_.directory_),
  PROTOBUF_FIELD_OFFSET(::Avalon::Network::Packets::Character::MapInfo, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::Avalon::Network::Packets::Character::MapInfo, _impl_.tilesetsdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Avalon::Network::Packets::Character::SCharacterSelectedPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Avalon::Network::Packets::Character::SCharacterSelectedPacket, _impl_.character_),
  PROTOBUF_FIELD_OFFSET(::Avalon::Network::Packets::Character::SCharacterSelectedPacket, _impl_.map_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Avalon::Network::Packets::Character::MapInfo)},
  { 14, -1, -1, sizeof(::Avalon::Network::Packets::Character::SCharacterSelectedPacket)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Avalon::Network::Packets::Character::_MapInfo_default_instance_._instance,
  &::Avalon::Network::Packets::Character::_SCharacterSelectedPacket_default_instance_._instance,
};

const char descriptor_table_protodef_SCharacterSelectedPacket_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036SCharacterSelectedPacket.proto\022 Avalon"
  ".Network.Packets.Character\032\tbcl.proto\032\032S"
  "CharacterListPacket.proto\"\240\001\n\007MapInfo\022\r\n"
  "\005MapId\030\001 \001(\005\022\035\n\nInstanceId\030\002 \001(\0132\t.bcl.G"
  "uid\022\014\n\004Name\030\003 \001(\t\022\023\n\013Description\030\004 \001(\t\022\r"
  "\n\005Atlas\030\005 \001(\t\022\021\n\tDirectory\030\006 \001(\t\022\014\n\004Data"
  "\030\007 \001(\014\022\024\n\014TilesetsData\030\010 \003(\014\"\226\001\n\030SCharac"
  "terSelectedPacket\022B\n\tCharacter\030\001 \001(\0132/.A"
  "valon.Network.Packets.Character.Characte"
  "rInfo\0226\n\003Map\030\002 \001(\0132).Avalon.Network.Pack"
  "ets.Character.MapInfob\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_SCharacterSelectedPacket_2eproto_deps[2] = {
  &::descriptor_table_SCharacterListPacket_2eproto,
  &::descriptor_table_bcl_2eproto,
};
static ::_pbi::once_flag descriptor_table_SCharacterSelectedPacket_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_SCharacterSelectedPacket_2eproto = {
    false, false, 429, descriptor_table_protodef_SCharacterSelectedPacket_2eproto,
    "SCharacterSelectedPacket.proto",
    &descriptor_table_SCharacterSelectedPacket_2eproto_once, descriptor_table_SCharacterSelectedPacket_2eproto_deps, 2, 2,
    schemas, file_default_instances, TableStruct_SCharacterSelectedPacket_2eproto::offsets,
    file_level_metadata_SCharacterSelectedPacket_2eproto, file_level_enum_descriptors_SCharacterSelectedPacket_2eproto,
    file_level_service_descriptors_SCharacterSelectedPacket_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_SCharacterSelectedPacket_2eproto_getter() {
  return &descriptor_table_SCharacterSelectedPacket_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_SCharacterSelectedPacket_2eproto(&descriptor_table_SCharacterSelectedPacket_2eproto);
namespace Avalon {
namespace Network {
namespace Packets {
namespace Character {

// ===================================================================

class MapInfo::_Internal {
 public:
  static const ::bcl::Guid& instanceid(const MapInfo* msg);
};

const ::bcl::Guid&
MapInfo::_Internal::instanceid(const MapInfo* msg) {
  return *msg->_impl_.instanceid_;
}
void MapInfo::clear_instanceid() {
  if (GetArenaForAllocation() == nullptr && _impl_.instanceid_ != nullptr) {
    delete _impl_.instanceid_;
  }
  _impl_.instanceid_ = nullptr;
}
MapInfo::MapInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Avalon.Network.Packets.Character.MapInfo)
}
MapInfo::MapInfo(const MapInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MapInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tilesetsdata_){from._impl_.tilesetsdata_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.atlas_){}
    , decltype(_impl_.directory_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.instanceid_){nullptr}
    , decltype(_impl_.mapid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(),
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(),
      _this->GetArenaForAllocation());
  }
  _impl_.atlas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.atlas_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_atlas().empty()) {
    _this->_impl_.atlas_.Set(from._internal_atlas(),
      _this->GetArenaForAllocation());
  }
  _impl_.directory_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.directory_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_directory().empty()) {
    _this->_impl_.directory_.Set(from._internal_directory(),
      _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(),
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_instanceid()) {
    _this->_impl_.instanceid_ = new ::bcl::Guid(*from._impl_.instanceid_);
  }
  _this->_impl_.mapid_ = from._impl_.mapid_;
  // @@protoc_insertion_point(copy_constructor:Avalon.Network.Packets.Character.MapInfo)
}

inline void MapInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tilesetsdata_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.atlas_){}
    , decltype(_impl_.directory_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.instanceid_){nullptr}
    , decltype(_impl_.mapid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.atlas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.atlas_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.directory_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.directory_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MapInfo::~MapInfo() {
  // @@protoc_insertion_point(destructor:Avalon.Network.Packets.Character.MapInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MapInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tilesetsdata_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.description_.Destroy();
  _impl_.atlas_.Destroy();
  _impl_.directory_.Destroy();
  _impl_.data_.Destroy();
  if (this != internal_default_instance()) delete _impl_.instanceid_;
}

void MapInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Avalon.Network.Packets.Character.MapInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tilesetsdata_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.atlas_.ClearToEmpty();
  _impl_.directory_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.instanceid_ != nullptr) {
    delete _impl_.instanceid_;
  }
  _impl_.instanceid_ = nullptr;
  _impl_.mapid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 MapId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.mapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bcl.Guid InstanceId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_instanceid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Avalon.Network.Packets.Character.MapInfo.Name"));
        } else
          goto handle_unusual;
        continue;
      // string Description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Avalon.Network.Packets.Character.MapInfo.Description"));
        } else
          goto handle_unusual;
        continue;
      // string Atlas = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_atlas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Avalon.Network.Packets.Character.MapInfo.Atlas"));
        } else
          goto handle_unusual;
        continue;
      // string Directory = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_directory();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Avalon.Network.Packets.Character.MapInfo.Directory"));
        } else
          goto handle_unusual;
        continue;
      // bytes Data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes TilesetsData = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tilesetsdata();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MapInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Avalon.Network.Packets.Character.MapInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 MapId = 1;
  if (this->_internal_mapid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_mapid(), target);
  }

  // .bcl.Guid InstanceId = 2;
  if (this->_internal_has_instanceid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::instanceid(this),
        _Internal::instanceid(this).GetCachedSize(), target, stream);
  }

  // string Name = 3;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Avalon.Network.Packets.Character.MapInfo.Name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // string Description = 4;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Avalon.Network.Packets.Character.MapInfo.Description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_description(), target);
  }

  // string Atlas = 5;
  if (!this->_internal_atlas().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_atlas().data(), static_cast<int>(this->_internal_atlas().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Avalon.Network.Packets.Character.MapInfo.Atlas");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_atlas(), target);
  }

  // string Directory = 6;
  if (!this->_internal_directory().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_directory().data(), static_cast<int>(this->_internal_directory().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Avalon.Network.Packets.Character.MapInfo.Directory");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_directory(), target);
  }

  // bytes Data = 7;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_data(), target);
  }

  // repeated bytes TilesetsData = 8;
  for (int i = 0, n = this->_internal_tilesetsdata_size(); i < n; i++) {
    const auto& s = this->_internal_tilesetsdata(i);
    target = stream->WriteBytes(8, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Avalon.Network.Packets.Character.MapInfo)
  return target;
}

size_t MapInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Avalon.Network.Packets.Character.MapInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes TilesetsData = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.tilesetsdata_.size());
  for (int i = 0, n = _impl_.tilesetsdata_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.tilesetsdata_.Get(i));
  }

  // string Name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string Description = 4;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string Atlas = 5;
  if (!this->_internal_atlas().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_atlas());
  }

  // string Directory = 6;
  if (!this->_internal_directory().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_directory());
  }

  // bytes Data = 7;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .bcl.Guid InstanceId = 2;
  if (this->_internal_has_instanceid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.instanceid_);
  }

  // int32 MapId = 1;
  if (this->_internal_mapid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mapid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MapInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MapInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MapInfo::GetClassData() const { return &_class_data_; }


void MapInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MapInfo*>(&to_msg);
  auto& from = static_cast<const MapInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Avalon.Network.Packets.Character.MapInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tilesetsdata_.MergeFrom(from._impl_.tilesetsdata_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_atlas().empty()) {
    _this->_internal_set_atlas(from._internal_atlas());
  }
  if (!from._internal_directory().empty()) {
    _this->_internal_set_directory(from._internal_directory());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_has_instanceid()) {
    _this->_internal_mutable_instanceid()->::bcl::Guid::MergeFrom(
        from._internal_instanceid());
  }
  if (from._internal_mapid() != 0) {
    _this->_internal_set_mapid(from._internal_mapid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MapInfo::CopyFrom(const MapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Avalon.Network.Packets.Character.MapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapInfo::IsInitialized() const {
  return true;
}

void MapInfo::InternalSwap(MapInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tilesetsdata_.InternalSwap(&other->_impl_.tilesetsdata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.atlas_, lhs_arena,
      &other->_impl_.atlas_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.directory_, lhs_arena,
      &other->_impl_.directory_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MapInfo, _impl_.mapid_)
      + sizeof(MapInfo::_impl_.mapid_)
      - PROTOBUF_FIELD_OFFSET(MapInfo, _impl_.instanceid_)>(
          reinterpret_cast<char*>(&_impl_.instanceid_),
          reinterpret_cast<char*>(&other->_impl_.instanceid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MapInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_SCharacterSelectedPacket_2eproto_getter, &descriptor_table_SCharacterSelectedPacket_2eproto_once,
      file_level_metadata_SCharacterSelectedPacket_2eproto[0]);
}

// ===================================================================

class SCharacterSelectedPacket::_Internal {
 public:
  static const ::Avalon::Network::Packets::Character::CharacterInfo& character(const SCharacterSelectedPacket* msg);
  static const ::Avalon::Network::Packets::Character::MapInfo& map(const SCharacterSelectedPacket* msg);
};

const ::Avalon::Network::Packets::Character::CharacterInfo&
SCharacterSelectedPacket::_Internal::character(const SCharacterSelectedPacket* msg) {
  return *msg->_impl_.character_;
}
const ::Avalon::Network::Packets::Character::MapInfo&
SCharacterSelectedPacket::_Internal::map(const SCharacterSelectedPacket* msg) {
  return *msg->_impl_.map_;
}
void SCharacterSelectedPacket::clear_character() {
  if (GetArenaForAllocation() == nullptr && _impl_.character_ != nullptr) {
    delete _impl_.character_;
  }
  _impl_.character_ = nullptr;
}
SCharacterSelectedPacket::SCharacterSelectedPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Avalon.Network.Packets.Character.SCharacterSelectedPacket)
}
SCharacterSelectedPacket::SCharacterSelectedPacket(const SCharacterSelectedPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SCharacterSelectedPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.character_){nullptr}
    , decltype(_impl_.map_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_character()) {
    _this->_impl_.character_ = new ::Avalon::Network::Packets::Character::CharacterInfo(*from._impl_.character_);
  }
  if (from._internal_has_map()) {
    _this->_impl_.map_ = new ::Avalon::Network::Packets::Character::MapInfo(*from._impl_.map_);
  }
  // @@protoc_insertion_point(copy_constructor:Avalon.Network.Packets.Character.SCharacterSelectedPacket)
}

inline void SCharacterSelectedPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.character_){nullptr}
    , decltype(_impl_.map_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SCharacterSelectedPacket::~SCharacterSelectedPacket() {
  // @@protoc_insertion_point(destructor:Avalon.Network.Packets.Character.SCharacterSelectedPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SCharacterSelectedPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.character_;
  if (this != internal_default_instance()) delete _impl_.map_;
}

void SCharacterSelectedPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SCharacterSelectedPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:Avalon.Network.Packets.Character.SCharacterSelectedPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.character_ != nullptr) {
    delete _impl_.character_;
  }
  _impl_.character_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.map_ != nullptr) {
    delete _impl_.map_;
  }
  _impl_.map_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCharacterSelectedPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Avalon.Network.Packets.Character.CharacterInfo Character = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_character(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Avalon.Network.Packets.Character.MapInfo Map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SCharacterSelectedPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Avalon.Network.Packets.Character.SCharacterSelectedPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Avalon.Network.Packets.Character.CharacterInfo Character = 1;
  if (this->_internal_has_character()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::character(this),
        _Internal::character(this).GetCachedSize(), target, stream);
  }

  // .Avalon.Network.Packets.Character.MapInfo Map = 2;
  if (this->_internal_has_map()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::map(this),
        _Internal::map(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Avalon.Network.Packets.Character.SCharacterSelectedPacket)
  return target;
}

size_t SCharacterSelectedPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Avalon.Network.Packets.Character.SCharacterSelectedPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Avalon.Network.Packets.Character.CharacterInfo Character = 1;
  if (this->_internal_has_character()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.character_);
  }

  // .Avalon.Network.Packets.Character.MapInfo Map = 2;
  if (this->_internal_has_map()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.map_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SCharacterSelectedPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SCharacterSelectedPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SCharacterSelectedPacket::GetClassData() const { return &_class_data_; }


void SCharacterSelectedPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SCharacterSelectedPacket*>(&to_msg);
  auto& from = static_cast<const SCharacterSelectedPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Avalon.Network.Packets.Character.SCharacterSelectedPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_character()) {
    _this->_internal_mutable_character()->::Avalon::Network::Packets::Character::CharacterInfo::MergeFrom(
        from._internal_character());
  }
  if (from._internal_has_map()) {
    _this->_internal_mutable_map()->::Avalon::Network::Packets::Character::MapInfo::MergeFrom(
        from._internal_map());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SCharacterSelectedPacket::CopyFrom(const SCharacterSelectedPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Avalon.Network.Packets.Character.SCharacterSelectedPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCharacterSelectedPacket::IsInitialized() const {
  return true;
}

void SCharacterSelectedPacket::InternalSwap(SCharacterSelectedPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCharacterSelectedPacket, _impl_.map_)
      + sizeof(SCharacterSelectedPacket::_impl_.map_)
      - PROTOBUF_FIELD_OFFSET(SCharacterSelectedPacket, _impl_.character_)>(
          reinterpret_cast<char*>(&_impl_.character_),
          reinterpret_cast<char*>(&other->_impl_.character_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCharacterSelectedPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_SCharacterSelectedPacket_2eproto_getter, &descriptor_table_SCharacterSelectedPacket_2eproto_once,
      file_level_metadata_SCharacterSelectedPacket_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Character
}  // namespace Packets
}  // namespace Network
}  // namespace Avalon
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Avalon::Network::Packets::Character::MapInfo*
Arena::CreateMaybeMessage< ::Avalon::Network::Packets::Character::MapInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Avalon::Network::Packets::Character::MapInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Avalon::Network::Packets::Character::SCharacterSelectedPacket*
Arena::CreateMaybeMessage< ::Avalon::Network::Packets::Character::SCharacterSelectedPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Avalon::Network::Packets::Character::SCharacterSelectedPacket >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
