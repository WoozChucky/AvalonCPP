// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SCharacterListPacket.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_SCharacterListPacket_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_SCharacterListPacket_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_SCharacterListPacket_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_SCharacterListPacket_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SCharacterListPacket_2eproto;
namespace Avalon {
namespace Network {
namespace Packets {
namespace Character {
class CharacterInfo;
struct CharacterInfoDefaultTypeInternal;
extern CharacterInfoDefaultTypeInternal _CharacterInfo_default_instance_;
class SCharacterListPacket;
struct SCharacterListPacketDefaultTypeInternal;
extern SCharacterListPacketDefaultTypeInternal _SCharacterListPacket_default_instance_;
}  // namespace Character
}  // namespace Packets
}  // namespace Network
}  // namespace Avalon
PROTOBUF_NAMESPACE_OPEN
template<> ::Avalon::Network::Packets::Character::CharacterInfo* Arena::CreateMaybeMessage<::Avalon::Network::Packets::Character::CharacterInfo>(Arena*);
template<> ::Avalon::Network::Packets::Character::SCharacterListPacket* Arena::CreateMaybeMessage<::Avalon::Network::Packets::Character::SCharacterListPacket>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Avalon {
namespace Network {
namespace Packets {
namespace Character {

// ===================================================================

class CharacterInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Avalon.Network.Packets.Character.CharacterInfo) */ {
 public:
  inline CharacterInfo() : CharacterInfo(nullptr) {}
  ~CharacterInfo() override;
  explicit PROTOBUF_CONSTEXPR CharacterInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CharacterInfo(const CharacterInfo& from);
  CharacterInfo(CharacterInfo&& from) noexcept
    : CharacterInfo() {
    *this = ::std::move(from);
  }

  inline CharacterInfo& operator=(const CharacterInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharacterInfo& operator=(CharacterInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CharacterInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CharacterInfo* internal_default_instance() {
    return reinterpret_cast<const CharacterInfo*>(
               &_CharacterInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CharacterInfo& a, CharacterInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CharacterInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CharacterInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CharacterInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CharacterInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CharacterInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CharacterInfo& from) {
    CharacterInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CharacterInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Avalon.Network.Packets.Character.CharacterInfo";
  }
  protected:
  explicit CharacterInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kCharacterIdFieldNumber = 1,
    kLevelFieldNumber = 3,
    kClassFieldNumber = 4,
    kXFieldNumber = 5,
    kYFieldNumber = 6,
    kRadiusFieldNumber = 7,
  };
  // string Name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 CharacterId = 1;
  void clear_characterid();
  int32_t characterid() const;
  void set_characterid(int32_t value);
  private:
  int32_t _internal_characterid() const;
  void _internal_set_characterid(int32_t value);
  public:

  // int32 Level = 3;
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // int32 Class = 4;
  void clear_class_();
  int32_t class_() const;
  void set_class_(int32_t value);
  private:
  int32_t _internal_class_() const;
  void _internal_set_class_(int32_t value);
  public:

  // float X = 5;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float Y = 6;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float Radius = 7;
  void clear_radius();
  float radius() const;
  void set_radius(float value);
  private:
  float _internal_radius() const;
  void _internal_set_radius(float value);
  public:

  // @@protoc_insertion_point(class_scope:Avalon.Network.Packets.Character.CharacterInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t characterid_;
    int32_t level_;
    int32_t class__;
    float x_;
    float y_;
    float radius_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_SCharacterListPacket_2eproto;
};
// -------------------------------------------------------------------

class SCharacterListPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Avalon.Network.Packets.Character.SCharacterListPacket) */ {
 public:
  inline SCharacterListPacket() : SCharacterListPacket(nullptr) {}
  ~SCharacterListPacket() override;
  explicit PROTOBUF_CONSTEXPR SCharacterListPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SCharacterListPacket(const SCharacterListPacket& from);
  SCharacterListPacket(SCharacterListPacket&& from) noexcept
    : SCharacterListPacket() {
    *this = ::std::move(from);
  }

  inline SCharacterListPacket& operator=(const SCharacterListPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCharacterListPacket& operator=(SCharacterListPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SCharacterListPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const SCharacterListPacket* internal_default_instance() {
    return reinterpret_cast<const SCharacterListPacket*>(
               &_SCharacterListPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SCharacterListPacket& a, SCharacterListPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(SCharacterListPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCharacterListPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SCharacterListPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SCharacterListPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SCharacterListPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SCharacterListPacket& from) {
    SCharacterListPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCharacterListPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Avalon.Network.Packets.Character.SCharacterListPacket";
  }
  protected:
  explicit SCharacterListPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharactersFieldNumber = 4,
    kAccountIdFieldNumber = 1,
    kCharacterCountFieldNumber = 2,
    kMaxCharacterCountFieldNumber = 3,
  };
  // repeated .Avalon.Network.Packets.Character.CharacterInfo Characters = 4;
  int characters_size() const;
  private:
  int _internal_characters_size() const;
  public:
  void clear_characters();
  ::Avalon::Network::Packets::Character::CharacterInfo* mutable_characters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Avalon::Network::Packets::Character::CharacterInfo >*
      mutable_characters();
  private:
  const ::Avalon::Network::Packets::Character::CharacterInfo& _internal_characters(int index) const;
  ::Avalon::Network::Packets::Character::CharacterInfo* _internal_add_characters();
  public:
  const ::Avalon::Network::Packets::Character::CharacterInfo& characters(int index) const;
  ::Avalon::Network::Packets::Character::CharacterInfo* add_characters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Avalon::Network::Packets::Character::CharacterInfo >&
      characters() const;

  // int32 AccountId = 1;
  void clear_accountid();
  int32_t accountid() const;
  void set_accountid(int32_t value);
  private:
  int32_t _internal_accountid() const;
  void _internal_set_accountid(int32_t value);
  public:

  // int32 CharacterCount = 2;
  void clear_charactercount();
  int32_t charactercount() const;
  void set_charactercount(int32_t value);
  private:
  int32_t _internal_charactercount() const;
  void _internal_set_charactercount(int32_t value);
  public:

  // int32 MaxCharacterCount = 3;
  void clear_maxcharactercount();
  int32_t maxcharactercount() const;
  void set_maxcharactercount(int32_t value);
  private:
  int32_t _internal_maxcharactercount() const;
  void _internal_set_maxcharactercount(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Avalon.Network.Packets.Character.SCharacterListPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Avalon::Network::Packets::Character::CharacterInfo > characters_;
    int32_t accountid_;
    int32_t charactercount_;
    int32_t maxcharactercount_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_SCharacterListPacket_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CharacterInfo

// int32 CharacterId = 1;
inline void CharacterInfo::clear_characterid() {
  _impl_.characterid_ = 0;
}
inline int32_t CharacterInfo::_internal_characterid() const {
  return _impl_.characterid_;
}
inline int32_t CharacterInfo::characterid() const {
  // @@protoc_insertion_point(field_get:Avalon.Network.Packets.Character.CharacterInfo.CharacterId)
  return _internal_characterid();
}
inline void CharacterInfo::_internal_set_characterid(int32_t value) {
  
  _impl_.characterid_ = value;
}
inline void CharacterInfo::set_characterid(int32_t value) {
  _internal_set_characterid(value);
  // @@protoc_insertion_point(field_set:Avalon.Network.Packets.Character.CharacterInfo.CharacterId)
}

// string Name = 2;
inline void CharacterInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CharacterInfo::name() const {
  // @@protoc_insertion_point(field_get:Avalon.Network.Packets.Character.CharacterInfo.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CharacterInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Avalon.Network.Packets.Character.CharacterInfo.Name)
}
inline std::string* CharacterInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Avalon.Network.Packets.Character.CharacterInfo.Name)
  return _s;
}
inline const std::string& CharacterInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CharacterInfo::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CharacterInfo::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CharacterInfo::release_name() {
  // @@protoc_insertion_point(field_release:Avalon.Network.Packets.Character.CharacterInfo.Name)
  return _impl_.name_.Release();
}
inline void CharacterInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Avalon.Network.Packets.Character.CharacterInfo.Name)
}

// int32 Level = 3;
inline void CharacterInfo::clear_level() {
  _impl_.level_ = 0;
}
inline int32_t CharacterInfo::_internal_level() const {
  return _impl_.level_;
}
inline int32_t CharacterInfo::level() const {
  // @@protoc_insertion_point(field_get:Avalon.Network.Packets.Character.CharacterInfo.Level)
  return _internal_level();
}
inline void CharacterInfo::_internal_set_level(int32_t value) {
  
  _impl_.level_ = value;
}
inline void CharacterInfo::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:Avalon.Network.Packets.Character.CharacterInfo.Level)
}

// int32 Class = 4;
inline void CharacterInfo::clear_class_() {
  _impl_.class__ = 0;
}
inline int32_t CharacterInfo::_internal_class_() const {
  return _impl_.class__;
}
inline int32_t CharacterInfo::class_() const {
  // @@protoc_insertion_point(field_get:Avalon.Network.Packets.Character.CharacterInfo.Class)
  return _internal_class_();
}
inline void CharacterInfo::_internal_set_class_(int32_t value) {
  
  _impl_.class__ = value;
}
inline void CharacterInfo::set_class_(int32_t value) {
  _internal_set_class_(value);
  // @@protoc_insertion_point(field_set:Avalon.Network.Packets.Character.CharacterInfo.Class)
}

// float X = 5;
inline void CharacterInfo::clear_x() {
  _impl_.x_ = 0;
}
inline float CharacterInfo::_internal_x() const {
  return _impl_.x_;
}
inline float CharacterInfo::x() const {
  // @@protoc_insertion_point(field_get:Avalon.Network.Packets.Character.CharacterInfo.X)
  return _internal_x();
}
inline void CharacterInfo::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void CharacterInfo::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Avalon.Network.Packets.Character.CharacterInfo.X)
}

// float Y = 6;
inline void CharacterInfo::clear_y() {
  _impl_.y_ = 0;
}
inline float CharacterInfo::_internal_y() const {
  return _impl_.y_;
}
inline float CharacterInfo::y() const {
  // @@protoc_insertion_point(field_get:Avalon.Network.Packets.Character.CharacterInfo.Y)
  return _internal_y();
}
inline void CharacterInfo::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void CharacterInfo::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Avalon.Network.Packets.Character.CharacterInfo.Y)
}

// float Radius = 7;
inline void CharacterInfo::clear_radius() {
  _impl_.radius_ = 0;
}
inline float CharacterInfo::_internal_radius() const {
  return _impl_.radius_;
}
inline float CharacterInfo::radius() const {
  // @@protoc_insertion_point(field_get:Avalon.Network.Packets.Character.CharacterInfo.Radius)
  return _internal_radius();
}
inline void CharacterInfo::_internal_set_radius(float value) {
  
  _impl_.radius_ = value;
}
inline void CharacterInfo::set_radius(float value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:Avalon.Network.Packets.Character.CharacterInfo.Radius)
}

// -------------------------------------------------------------------

// SCharacterListPacket

// int32 AccountId = 1;
inline void SCharacterListPacket::clear_accountid() {
  _impl_.accountid_ = 0;
}
inline int32_t SCharacterListPacket::_internal_accountid() const {
  return _impl_.accountid_;
}
inline int32_t SCharacterListPacket::accountid() const {
  // @@protoc_insertion_point(field_get:Avalon.Network.Packets.Character.SCharacterListPacket.AccountId)
  return _internal_accountid();
}
inline void SCharacterListPacket::_internal_set_accountid(int32_t value) {
  
  _impl_.accountid_ = value;
}
inline void SCharacterListPacket::set_accountid(int32_t value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:Avalon.Network.Packets.Character.SCharacterListPacket.AccountId)
}

// int32 CharacterCount = 2;
inline void SCharacterListPacket::clear_charactercount() {
  _impl_.charactercount_ = 0;
}
inline int32_t SCharacterListPacket::_internal_charactercount() const {
  return _impl_.charactercount_;
}
inline int32_t SCharacterListPacket::charactercount() const {
  // @@protoc_insertion_point(field_get:Avalon.Network.Packets.Character.SCharacterListPacket.CharacterCount)
  return _internal_charactercount();
}
inline void SCharacterListPacket::_internal_set_charactercount(int32_t value) {
  
  _impl_.charactercount_ = value;
}
inline void SCharacterListPacket::set_charactercount(int32_t value) {
  _internal_set_charactercount(value);
  // @@protoc_insertion_point(field_set:Avalon.Network.Packets.Character.SCharacterListPacket.CharacterCount)
}

// int32 MaxCharacterCount = 3;
inline void SCharacterListPacket::clear_maxcharactercount() {
  _impl_.maxcharactercount_ = 0;
}
inline int32_t SCharacterListPacket::_internal_maxcharactercount() const {
  return _impl_.maxcharactercount_;
}
inline int32_t SCharacterListPacket::maxcharactercount() const {
  // @@protoc_insertion_point(field_get:Avalon.Network.Packets.Character.SCharacterListPacket.MaxCharacterCount)
  return _internal_maxcharactercount();
}
inline void SCharacterListPacket::_internal_set_maxcharactercount(int32_t value) {
  
  _impl_.maxcharactercount_ = value;
}
inline void SCharacterListPacket::set_maxcharactercount(int32_t value) {
  _internal_set_maxcharactercount(value);
  // @@protoc_insertion_point(field_set:Avalon.Network.Packets.Character.SCharacterListPacket.MaxCharacterCount)
}

// repeated .Avalon.Network.Packets.Character.CharacterInfo Characters = 4;
inline int SCharacterListPacket::_internal_characters_size() const {
  return _impl_.characters_.size();
}
inline int SCharacterListPacket::characters_size() const {
  return _internal_characters_size();
}
inline void SCharacterListPacket::clear_characters() {
  _impl_.characters_.Clear();
}
inline ::Avalon::Network::Packets::Character::CharacterInfo* SCharacterListPacket::mutable_characters(int index) {
  // @@protoc_insertion_point(field_mutable:Avalon.Network.Packets.Character.SCharacterListPacket.Characters)
  return _impl_.characters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Avalon::Network::Packets::Character::CharacterInfo >*
SCharacterListPacket::mutable_characters() {
  // @@protoc_insertion_point(field_mutable_list:Avalon.Network.Packets.Character.SCharacterListPacket.Characters)
  return &_impl_.characters_;
}
inline const ::Avalon::Network::Packets::Character::CharacterInfo& SCharacterListPacket::_internal_characters(int index) const {
  return _impl_.characters_.Get(index);
}
inline const ::Avalon::Network::Packets::Character::CharacterInfo& SCharacterListPacket::characters(int index) const {
  // @@protoc_insertion_point(field_get:Avalon.Network.Packets.Character.SCharacterListPacket.Characters)
  return _internal_characters(index);
}
inline ::Avalon::Network::Packets::Character::CharacterInfo* SCharacterListPacket::_internal_add_characters() {
  return _impl_.characters_.Add();
}
inline ::Avalon::Network::Packets::Character::CharacterInfo* SCharacterListPacket::add_characters() {
  ::Avalon::Network::Packets::Character::CharacterInfo* _add = _internal_add_characters();
  // @@protoc_insertion_point(field_add:Avalon.Network.Packets.Character.SCharacterListPacket.Characters)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Avalon::Network::Packets::Character::CharacterInfo >&
SCharacterListPacket::characters() const {
  // @@protoc_insertion_point(field_list:Avalon.Network.Packets.Character.SCharacterListPacket.Characters)
  return _impl_.characters_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Character
}  // namespace Packets
}  // namespace Network
}  // namespace Avalon

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_SCharacterListPacket_2eproto
