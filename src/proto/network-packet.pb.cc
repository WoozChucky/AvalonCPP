// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: network-packet.proto

#include "network-packet.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Avalon {
namespace Network {
namespace Packets {
namespace Abstractions {
PROTOBUF_CONSTEXPR NetworkPacket::NetworkPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.payload_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NetworkPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetworkPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetworkPacketDefaultTypeInternal() {}
  union {
    NetworkPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetworkPacketDefaultTypeInternal _NetworkPacket_default_instance_;
PROTOBUF_CONSTEXPR NetworkPacketHeader::NetworkPacketHeader(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.flags_)*/0
  , /*decltype(_impl_.protocol_)*/0
  , /*decltype(_impl_.version_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NetworkPacketHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetworkPacketHeaderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetworkPacketHeaderDefaultTypeInternal() {}
  union {
    NetworkPacketHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetworkPacketHeaderDefaultTypeInternal _NetworkPacketHeader_default_instance_;
}  // namespace Abstractions
}  // namespace Packets
}  // namespace Network
}  // namespace Avalon
static ::_pb::Metadata file_level_metadata_network_2dpacket_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_network_2dpacket_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_network_2dpacket_2eproto = nullptr;

const uint32_t TableStruct_network_2dpacket_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Avalon::Network::Packets::Abstractions::NetworkPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Avalon::Network::Packets::Abstractions::NetworkPacket, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::Avalon::Network::Packets::Abstractions::NetworkPacket, _impl_.payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Avalon::Network::Packets::Abstractions::NetworkPacketHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Avalon::Network::Packets::Abstractions::NetworkPacketHeader, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::Avalon::Network::Packets::Abstractions::NetworkPacketHeader, _impl_.flags_),
  PROTOBUF_FIELD_OFFSET(::Avalon::Network::Packets::Abstractions::NetworkPacketHeader, _impl_.protocol_),
  PROTOBUF_FIELD_OFFSET(::Avalon::Network::Packets::Abstractions::NetworkPacketHeader, _impl_.version_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Avalon::Network::Packets::Abstractions::NetworkPacket)},
  { 8, -1, -1, sizeof(::Avalon::Network::Packets::Abstractions::NetworkPacketHeader)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Avalon::Network::Packets::Abstractions::_NetworkPacket_default_instance_._instance,
  &::Avalon::Network::Packets::Abstractions::_NetworkPacketHeader_default_instance_._instance,
};

const char descriptor_table_protodef_network_2dpacket_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024network-packet.proto\022#Avalon.Network.P"
  "ackets.Abstractions\"j\n\rNetworkPacket\022H\n\006"
  "Header\030\001 \001(\01328.Avalon.Network.Packets.Ab"
  "stractions.NetworkPacketHeader\022\017\n\007Payloa"
  "d\030\002 \001(\014\"\374\001\n\023NetworkPacketHeader\022D\n\004Type\030"
  "\001 \001(\01626.Avalon.Network.Packets.Abstracti"
  "ons.NetworkPacketType\022F\n\005Flags\030\002 \001(\01627.A"
  "valon.Network.Packets.Abstractions.Netwo"
  "rkPacketFlags\022F\n\010Protocol\030\003 \001(\01624.Avalon"
  ".Network.Packets.Abstractions.NetworkPro"
  "tocol\022\017\n\007Version\030\004 \001(\005*K\n\022NetworkPacketF"
  "lags\022\010\n\004None\020\000\022\r\n\tClearText\020\001\022\r\n\tHandsha"
  "ke\020\002\022\r\n\tEncrypted\020\004*\374\t\n\021NetworkPacketTyp"
  "e\022\013\n\007UNKNOWN\020\000\022\022\n\005ERROR\020\377\377\377\377\377\377\377\377\377\001\022\025\n\020CM"
  "SG_SERVER_INFO\020\200 \022\025\n\020CMSG_CLIENT_INFO\020\201 "
  "\022\032\n\025CMSG_CLIENT_HANDSHAKE\020\202 \022\016\n\tCMSG_AUT"
  "H\020\200@\022\024\n\017CMSG_AUTH_PATCH\020\201@\022\020\n\013CMSG_LOGOU"
  "T\020\202@\022\022\n\rCMSG_REGISTER\020\203@\022\030\n\023CMSG_CHARACT"
  "ER_LIST\020\220@\022\032\n\025CMSG_CHARACTER_CREATE\020\221@\022\032"
  "\n\025CMSG_CHARACTER_DELETE\020\222@\022\034\n\027CMSG_CHARA"
  "CTER_SELECTED\020\223@\022\032\n\025CMSG_CHARACTER_LOADE"
  "D\020\224@\022\026\n\021CMSG_MAP_TELEPORT\020\240@\022\026\n\021CMSG_QUE"
  "ST_STATUS\020\300@\022\024\n\017CMSG_QUEST_LIST\020\301@\022\037\n\032CM"
  "SG_QUEST_QUERY_AVAILABLE\020\302@\022\022\n\rCMSG_INTE"
  "RACT\020\260@\022 \n\033CMSG_REQUEST_SERVER_VERSION\020\241"
  "@\022\034\n\027CMSG_REQUEST_LOBBY_LIST\020\203@\022\022\n\rCMSG_"
  "MOVEMENT\020\204@\022\016\n\tCMSG_PING\020\205@\022\016\n\tCMSG_PONG"
  "\020\206@\022\026\n\021CMSG_CHAT_MESSAGE\020\207@\022\023\n\016CMSG_CHAT"
  "_OPEN\020\210@\022\024\n\017CMSG_CHAT_CLOSE\020\211@\022\035\n\030CMSG_G"
  "ROUP_INVITE_RESULT\020\212@\022\025\n\020SMSG_SERVER_INF"
  "O\020\200`\022\032\n\025SMSG_SERVER_HANDSHAKE\020\202`\022!\n\034SMSG"
  "_SERVER_HANDSHAKE_RESULT\020\201`\022\025\n\020SMSG_AUTH"
  "_RESULT\020\220`\022\020\n\013SMSG_LOGOUT\020\221`\022\031\n\024SMSG_REG"
  "ISTER_RESULT\020\222`\022\035\n\030SMSG_CHARACTER_CONNEC"
  "TED\020\240`\022 \n\033SMSG_CHARACTER_DISCONNECTED\020\241`"
  "\022\030\n\023SMSG_CHARACTER_LIST\020\243`\022\033\n\026SMSG_CHARA"
  "CTER_CREATED\020\244`\022\033\n\026SMSG_CHARACTER_DELETE"
  "D\020\245`\022\034\n\027SMSG_CHARACTER_SELECTED\020\246`\022\026\n\021SM"
  "SG_MAP_TELEPORT\020\260`\022\016\n\tSMSG_PONG\020\206`\022\016\n\tSM"
  "SG_PING\020\207`\022\030\n\023SMSG_SERVER_VERSION\020\202`\022 \n\033"
  "SMSG_PLAYER_POSITION_UPDATE\020\205`\022\024\n\017SMSG_N"
  "PC_UPDATE\020\210`\022\026\n\021SMSG_CHAT_MESSAGE\020\211`\022\023\n\016"
  "SMSG_CHAT_OPEN\020\212`\022\024\n\017SMSG_CHAT_CLOSE\020\213`\022"
  "\026\n\021SMSG_GROUP_INVITE\020\215`\022\035\n\030SMSG_GROUP_IN"
  "VITE_RESULT\020\216`\032\002\020\001*:\n\017NetworkProtocol\022\013\n"
  "\007Invalid\020\000\022\007\n\003Tcp\020\001\022\007\n\003Udp\020\002\022\010\n\004Both\020\003b\006"
  "proto3"
  ;
static ::_pbi::once_flag descriptor_table_network_2dpacket_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_network_2dpacket_2eproto = {
    false, false, 1846, descriptor_table_protodef_network_2dpacket_2eproto,
    "network-packet.proto",
    &descriptor_table_network_2dpacket_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_network_2dpacket_2eproto::offsets,
    file_level_metadata_network_2dpacket_2eproto, file_level_enum_descriptors_network_2dpacket_2eproto,
    file_level_service_descriptors_network_2dpacket_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_network_2dpacket_2eproto_getter() {
  return &descriptor_table_network_2dpacket_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_network_2dpacket_2eproto(&descriptor_table_network_2dpacket_2eproto);
namespace Avalon {
namespace Network {
namespace Packets {
namespace Abstractions {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetworkPacketFlags_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_network_2dpacket_2eproto);
  return file_level_enum_descriptors_network_2dpacket_2eproto[0];
}
bool NetworkPacketFlags_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetworkPacketType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_network_2dpacket_2eproto);
  return file_level_enum_descriptors_network_2dpacket_2eproto[1];
}
bool NetworkPacketType_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 4096:
    case 4097:
    case 4098:
    case 8192:
    case 8193:
    case 8194:
    case 8195:
    case 8196:
    case 8197:
    case 8198:
    case 8199:
    case 8200:
    case 8201:
    case 8202:
    case 8208:
    case 8209:
    case 8210:
    case 8211:
    case 8212:
    case 8224:
    case 8225:
    case 8240:
    case 8256:
    case 8257:
    case 8258:
    case 12288:
    case 12289:
    case 12290:
    case 12293:
    case 12294:
    case 12295:
    case 12296:
    case 12297:
    case 12298:
    case 12299:
    case 12301:
    case 12302:
    case 12304:
    case 12305:
    case 12306:
    case 12320:
    case 12321:
    case 12323:
    case 12324:
    case 12325:
    case 12326:
    case 12336:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetworkProtocol_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_network_2dpacket_2eproto);
  return file_level_enum_descriptors_network_2dpacket_2eproto[2];
}
bool NetworkProtocol_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class NetworkPacket::_Internal {
 public:
  static const ::Avalon::Network::Packets::Abstractions::NetworkPacketHeader& header(const NetworkPacket* msg);
};

const ::Avalon::Network::Packets::Abstractions::NetworkPacketHeader&
NetworkPacket::_Internal::header(const NetworkPacket* msg) {
  return *msg->_impl_.header_;
}
NetworkPacket::NetworkPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Avalon.Network.Packets.Abstractions.NetworkPacket)
}
NetworkPacket::NetworkPacket(const NetworkPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NetworkPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , decltype(_impl_.header_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload().empty()) {
    _this->_impl_.payload_.Set(from._internal_payload(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::Avalon::Network::Packets::Abstractions::NetworkPacketHeader(*from._impl_.header_);
  }
  // @@protoc_insertion_point(copy_constructor:Avalon.Network.Packets.Abstractions.NetworkPacket)
}

inline void NetworkPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , decltype(_impl_.header_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NetworkPacket::~NetworkPacket() {
  // @@protoc_insertion_point(destructor:Avalon.Network.Packets.Abstractions.NetworkPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NetworkPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.payload_.Destroy();
  if (this != internal_default_instance()) delete _impl_.header_;
}

void NetworkPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NetworkPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:Avalon.Network.Packets.Abstractions.NetworkPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.payload_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetworkPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Avalon.Network.Packets.Abstractions.NetworkPacketHeader Header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Payload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetworkPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Avalon.Network.Packets.Abstractions.NetworkPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Avalon.Network.Packets.Abstractions.NetworkPacketHeader Header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // bytes Payload = 2;
  if (!this->_internal_payload().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Avalon.Network.Packets.Abstractions.NetworkPacket)
  return target;
}

size_t NetworkPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Avalon.Network.Packets.Abstractions.NetworkPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Payload = 2;
  if (!this->_internal_payload().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  // .Avalon.Network.Packets.Abstractions.NetworkPacketHeader Header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetworkPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NetworkPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetworkPacket::GetClassData() const { return &_class_data_; }


void NetworkPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NetworkPacket*>(&to_msg);
  auto& from = static_cast<const NetworkPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Avalon.Network.Packets.Abstractions.NetworkPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_payload().empty()) {
    _this->_internal_set_payload(from._internal_payload());
  }
  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::Avalon::Network::Packets::Abstractions::NetworkPacketHeader::MergeFrom(
        from._internal_header());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetworkPacket::CopyFrom(const NetworkPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Avalon.Network.Packets.Abstractions.NetworkPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkPacket::IsInitialized() const {
  return true;
}

void NetworkPacket::InternalSwap(NetworkPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.payload_, lhs_arena,
      &other->_impl_.payload_, rhs_arena
  );
  swap(_impl_.header_, other->_impl_.header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_network_2dpacket_2eproto_getter, &descriptor_table_network_2dpacket_2eproto_once,
      file_level_metadata_network_2dpacket_2eproto[0]);
}

// ===================================================================

class NetworkPacketHeader::_Internal {
 public:
};

NetworkPacketHeader::NetworkPacketHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Avalon.Network.Packets.Abstractions.NetworkPacketHeader)
}
NetworkPacketHeader::NetworkPacketHeader(const NetworkPacketHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NetworkPacketHeader* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.flags_){}
    , decltype(_impl_.protocol_){}
    , decltype(_impl_.version_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.version_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.version_));
  // @@protoc_insertion_point(copy_constructor:Avalon.Network.Packets.Abstractions.NetworkPacketHeader)
}

inline void NetworkPacketHeader::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0}
    , decltype(_impl_.flags_){0}
    , decltype(_impl_.protocol_){0}
    , decltype(_impl_.version_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NetworkPacketHeader::~NetworkPacketHeader() {
  // @@protoc_insertion_point(destructor:Avalon.Network.Packets.Abstractions.NetworkPacketHeader)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NetworkPacketHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NetworkPacketHeader::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NetworkPacketHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:Avalon.Network.Packets.Abstractions.NetworkPacketHeader)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.version_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.version_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetworkPacketHeader::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Avalon.Network.Packets.Abstractions.NetworkPacketType Type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::Avalon::Network::Packets::Abstractions::NetworkPacketType>(val));
        } else
          goto handle_unusual;
        continue;
      // .Avalon.Network.Packets.Abstractions.NetworkPacketFlags Flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_flags(static_cast<::Avalon::Network::Packets::Abstractions::NetworkPacketFlags>(val));
        } else
          goto handle_unusual;
        continue;
      // .Avalon.Network.Packets.Abstractions.NetworkProtocol Protocol = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_protocol(static_cast<::Avalon::Network::Packets::Abstractions::NetworkProtocol>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 Version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetworkPacketHeader::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Avalon.Network.Packets.Abstractions.NetworkPacketHeader)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Avalon.Network.Packets.Abstractions.NetworkPacketType Type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .Avalon.Network.Packets.Abstractions.NetworkPacketFlags Flags = 2;
  if (this->_internal_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_flags(), target);
  }

  // .Avalon.Network.Packets.Abstractions.NetworkProtocol Protocol = 3;
  if (this->_internal_protocol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_protocol(), target);
  }

  // int32 Version = 4;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Avalon.Network.Packets.Abstractions.NetworkPacketHeader)
  return target;
}

size_t NetworkPacketHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Avalon.Network.Packets.Abstractions.NetworkPacketHeader)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Avalon.Network.Packets.Abstractions.NetworkPacketType Type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .Avalon.Network.Packets.Abstractions.NetworkPacketFlags Flags = 2;
  if (this->_internal_flags() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_flags());
  }

  // .Avalon.Network.Packets.Abstractions.NetworkProtocol Protocol = 3;
  if (this->_internal_protocol() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_protocol());
  }

  // int32 Version = 4;
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetworkPacketHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NetworkPacketHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetworkPacketHeader::GetClassData() const { return &_class_data_; }


void NetworkPacketHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NetworkPacketHeader*>(&to_msg);
  auto& from = static_cast<const NetworkPacketHeader&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Avalon.Network.Packets.Abstractions.NetworkPacketHeader)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_flags() != 0) {
    _this->_internal_set_flags(from._internal_flags());
  }
  if (from._internal_protocol() != 0) {
    _this->_internal_set_protocol(from._internal_protocol());
  }
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetworkPacketHeader::CopyFrom(const NetworkPacketHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Avalon.Network.Packets.Abstractions.NetworkPacketHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkPacketHeader::IsInitialized() const {
  return true;
}

void NetworkPacketHeader::InternalSwap(NetworkPacketHeader* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetworkPacketHeader, _impl_.version_)
      + sizeof(NetworkPacketHeader::_impl_.version_)
      - PROTOBUF_FIELD_OFFSET(NetworkPacketHeader, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkPacketHeader::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_network_2dpacket_2eproto_getter, &descriptor_table_network_2dpacket_2eproto_once,
      file_level_metadata_network_2dpacket_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Abstractions
}  // namespace Packets
}  // namespace Network
}  // namespace Avalon
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Avalon::Network::Packets::Abstractions::NetworkPacket*
Arena::CreateMaybeMessage< ::Avalon::Network::Packets::Abstractions::NetworkPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Avalon::Network::Packets::Abstractions::NetworkPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::Avalon::Network::Packets::Abstractions::NetworkPacketHeader*
Arena::CreateMaybeMessage< ::Avalon::Network::Packets::Abstractions::NetworkPacketHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Avalon::Network::Packets::Abstractions::NetworkPacketHeader >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
