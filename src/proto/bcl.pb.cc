// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bcl.proto

#include "bcl.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace bcl {
PROTOBUF_CONSTEXPR TimeSpan::TimeSpan(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/int64_t{0}
  , /*decltype(_impl_.scale_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TimeSpanDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TimeSpanDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TimeSpanDefaultTypeInternal() {}
  union {
    TimeSpan _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TimeSpanDefaultTypeInternal _TimeSpan_default_instance_;
PROTOBUF_CONSTEXPR DateTime::DateTime(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/int64_t{0}
  , /*decltype(_impl_.scale_)*/0
  , /*decltype(_impl_.kind_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DateTimeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DateTimeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DateTimeDefaultTypeInternal() {}
  union {
    DateTime _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DateTimeDefaultTypeInternal _DateTime_default_instance_;
PROTOBUF_CONSTEXPR NetObjectProxy::NetObjectProxy(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.typename__)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.payload_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.existingobjectkey_)*/0
  , /*decltype(_impl_.newobjectkey_)*/0
  , /*decltype(_impl_.existingtypekey_)*/0
  , /*decltype(_impl_.newtypekey_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NetObjectProxyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetObjectProxyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetObjectProxyDefaultTypeInternal() {}
  union {
    NetObjectProxy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetObjectProxyDefaultTypeInternal _NetObjectProxy_default_instance_;
PROTOBUF_CONSTEXPR Guid::Guid(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lo_)*/uint64_t{0u}
  , /*decltype(_impl_.hi_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GuidDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GuidDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GuidDefaultTypeInternal() {}
  union {
    Guid _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GuidDefaultTypeInternal _Guid_default_instance_;
PROTOBUF_CONSTEXPR Decimal::Decimal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lo_)*/uint64_t{0u}
  , /*decltype(_impl_.hi_)*/0u
  , /*decltype(_impl_.signscale_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DecimalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DecimalDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DecimalDefaultTypeInternal() {}
  union {
    Decimal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DecimalDefaultTypeInternal _Decimal_default_instance_;
}  // namespace bcl
static ::_pb::Metadata file_level_metadata_bcl_2eproto[5];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_bcl_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_bcl_2eproto = nullptr;

const uint32_t TableStruct_bcl_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bcl::TimeSpan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bcl::TimeSpan, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::bcl::TimeSpan, _impl_.scale_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bcl::DateTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bcl::DateTime, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::bcl::DateTime, _impl_.scale_),
  PROTOBUF_FIELD_OFFSET(::bcl::DateTime, _impl_.kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bcl::NetObjectProxy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bcl::NetObjectProxy, _impl_.existingobjectkey_),
  PROTOBUF_FIELD_OFFSET(::bcl::NetObjectProxy, _impl_.newobjectkey_),
  PROTOBUF_FIELD_OFFSET(::bcl::NetObjectProxy, _impl_.existingtypekey_),
  PROTOBUF_FIELD_OFFSET(::bcl::NetObjectProxy, _impl_.newtypekey_),
  PROTOBUF_FIELD_OFFSET(::bcl::NetObjectProxy, _impl_.typename__),
  PROTOBUF_FIELD_OFFSET(::bcl::NetObjectProxy, _impl_.payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bcl::Guid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bcl::Guid, _impl_.lo_),
  PROTOBUF_FIELD_OFFSET(::bcl::Guid, _impl_.hi_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bcl::Decimal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bcl::Decimal, _impl_.lo_),
  PROTOBUF_FIELD_OFFSET(::bcl::Decimal, _impl_.hi_),
  PROTOBUF_FIELD_OFFSET(::bcl::Decimal, _impl_.signscale_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::bcl::TimeSpan)},
  { 8, -1, -1, sizeof(::bcl::DateTime)},
  { 17, -1, -1, sizeof(::bcl::NetObjectProxy)},
  { 29, -1, -1, sizeof(::bcl::Guid)},
  { 37, -1, -1, sizeof(::bcl::Decimal)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::bcl::_TimeSpan_default_instance_._instance,
  &::bcl::_DateTime_default_instance_._instance,
  &::bcl::_NetObjectProxy_default_instance_._instance,
  &::bcl::_Guid_default_instance_._instance,
  &::bcl::_Decimal_default_instance_._instance,
};

const char descriptor_table_protodef_bcl_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tbcl.proto\022\003bcl\"\256\001\n\010TimeSpan\022\r\n\005value\030\001"
  " \001(\022\022*\n\005scale\030\002 \001(\0162\033.bcl.TimeSpan.TimeS"
  "panScale\"g\n\rTimeSpanScale\022\010\n\004DAYS\020\000\022\t\n\005H"
  "OURS\020\001\022\013\n\007MINUTES\020\002\022\013\n\007SECONDS\020\003\022\020\n\014MILL"
  "ISECONDS\020\004\022\t\n\005TICKS\020\005\022\n\n\006MINMAX\020\017\"\215\002\n\010Da"
  "teTime\022\r\n\005value\030\001 \001(\022\022*\n\005scale\030\002 \001(\0162\033.b"
  "cl.DateTime.TimeSpanScale\022(\n\004kind\030\003 \001(\0162"
  "\032.bcl.DateTime.DateTimeKind\"g\n\rTimeSpanS"
  "cale\022\010\n\004DAYS\020\000\022\t\n\005HOURS\020\001\022\013\n\007MINUTES\020\002\022\013"
  "\n\007SECONDS\020\003\022\020\n\014MILLISECONDS\020\004\022\t\n\005TICKS\020\005"
  "\022\n\n\006MINMAX\020\017\"3\n\014DateTimeKind\022\017\n\013UNSPECIF"
  "IED\020\000\022\007\n\003UTC\020\001\022\t\n\005LOCAL\020\002\"\221\001\n\016NetObjectP"
  "roxy\022\031\n\021existingObjectKey\030\001 \001(\005\022\024\n\014newOb"
  "jectKey\030\002 \001(\005\022\027\n\017existingTypeKey\030\003 \001(\005\022\022"
  "\n\nnewTypeKey\030\004 \001(\005\022\020\n\010typeName\030\010 \001(\t\022\017\n\007"
  "payload\030\n \001(\014\"\036\n\004Guid\022\n\n\002lo\030\001 \001(\006\022\n\n\002hi\030"
  "\002 \001(\006\"4\n\007Decimal\022\n\n\002lo\030\001 \001(\004\022\n\n\002hi\030\002 \001(\r"
  "\022\021\n\tsignScale\030\003 \001(\rB\017\252\002\014ProtoBuf.Bclb\006pr"
  "oto3"
  ;
static ::_pbi::once_flag descriptor_table_bcl_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_bcl_2eproto = {
    false, false, 724, descriptor_table_protodef_bcl_2eproto,
    "bcl.proto",
    &descriptor_table_bcl_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_bcl_2eproto::offsets,
    file_level_metadata_bcl_2eproto, file_level_enum_descriptors_bcl_2eproto,
    file_level_service_descriptors_bcl_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_bcl_2eproto_getter() {
  return &descriptor_table_bcl_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_bcl_2eproto(&descriptor_table_bcl_2eproto);
namespace bcl {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TimeSpan_TimeSpanScale_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bcl_2eproto);
  return file_level_enum_descriptors_bcl_2eproto[0];
}
bool TimeSpan_TimeSpanScale_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 15:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TimeSpan_TimeSpanScale TimeSpan::DAYS;
constexpr TimeSpan_TimeSpanScale TimeSpan::HOURS;
constexpr TimeSpan_TimeSpanScale TimeSpan::MINUTES;
constexpr TimeSpan_TimeSpanScale TimeSpan::SECONDS;
constexpr TimeSpan_TimeSpanScale TimeSpan::MILLISECONDS;
constexpr TimeSpan_TimeSpanScale TimeSpan::TICKS;
constexpr TimeSpan_TimeSpanScale TimeSpan::MINMAX;
constexpr TimeSpan_TimeSpanScale TimeSpan::TimeSpanScale_MIN;
constexpr TimeSpan_TimeSpanScale TimeSpan::TimeSpanScale_MAX;
constexpr int TimeSpan::TimeSpanScale_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DateTime_TimeSpanScale_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bcl_2eproto);
  return file_level_enum_descriptors_bcl_2eproto[1];
}
bool DateTime_TimeSpanScale_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 15:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DateTime_TimeSpanScale DateTime::DAYS;
constexpr DateTime_TimeSpanScale DateTime::HOURS;
constexpr DateTime_TimeSpanScale DateTime::MINUTES;
constexpr DateTime_TimeSpanScale DateTime::SECONDS;
constexpr DateTime_TimeSpanScale DateTime::MILLISECONDS;
constexpr DateTime_TimeSpanScale DateTime::TICKS;
constexpr DateTime_TimeSpanScale DateTime::MINMAX;
constexpr DateTime_TimeSpanScale DateTime::TimeSpanScale_MIN;
constexpr DateTime_TimeSpanScale DateTime::TimeSpanScale_MAX;
constexpr int DateTime::TimeSpanScale_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DateTime_DateTimeKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bcl_2eproto);
  return file_level_enum_descriptors_bcl_2eproto[2];
}
bool DateTime_DateTimeKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DateTime_DateTimeKind DateTime::UNSPECIFIED;
constexpr DateTime_DateTimeKind DateTime::UTC;
constexpr DateTime_DateTimeKind DateTime::LOCAL;
constexpr DateTime_DateTimeKind DateTime::DateTimeKind_MIN;
constexpr DateTime_DateTimeKind DateTime::DateTimeKind_MAX;
constexpr int DateTime::DateTimeKind_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class TimeSpan::_Internal {
 public:
};

TimeSpan::TimeSpan(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bcl.TimeSpan)
}
TimeSpan::TimeSpan(const TimeSpan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TimeSpan* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , decltype(_impl_.scale_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.value_, &from._impl_.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.scale_) -
    reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.scale_));
  // @@protoc_insertion_point(copy_constructor:bcl.TimeSpan)
}

inline void TimeSpan::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){int64_t{0}}
    , decltype(_impl_.scale_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TimeSpan::~TimeSpan() {
  // @@protoc_insertion_point(destructor:bcl.TimeSpan)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TimeSpan::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TimeSpan::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TimeSpan::Clear() {
// @@protoc_insertion_point(message_clear_start:bcl.TimeSpan)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.scale_) -
      reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.scale_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimeSpan::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint64 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bcl.TimeSpan.TimeSpanScale scale = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_scale(static_cast<::bcl::TimeSpan_TimeSpanScale>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TimeSpan::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bcl.TimeSpan)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint64 value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(1, this->_internal_value(), target);
  }

  // .bcl.TimeSpan.TimeSpanScale scale = 2;
  if (this->_internal_scale() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_scale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bcl.TimeSpan)
  return target;
}

size_t TimeSpan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bcl.TimeSpan)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint64 value = 1;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(this->_internal_value());
  }

  // .bcl.TimeSpan.TimeSpanScale scale = 2;
  if (this->_internal_scale() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_scale());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TimeSpan::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TimeSpan::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TimeSpan::GetClassData() const { return &_class_data_; }


void TimeSpan::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TimeSpan*>(&to_msg);
  auto& from = static_cast<const TimeSpan&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bcl.TimeSpan)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_scale() != 0) {
    _this->_internal_set_scale(from._internal_scale());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TimeSpan::CopyFrom(const TimeSpan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bcl.TimeSpan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeSpan::IsInitialized() const {
  return true;
}

void TimeSpan::InternalSwap(TimeSpan* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimeSpan, _impl_.scale_)
      + sizeof(TimeSpan::_impl_.scale_)
      - PROTOBUF_FIELD_OFFSET(TimeSpan, _impl_.value_)>(
          reinterpret_cast<char*>(&_impl_.value_),
          reinterpret_cast<char*>(&other->_impl_.value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeSpan::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bcl_2eproto_getter, &descriptor_table_bcl_2eproto_once,
      file_level_metadata_bcl_2eproto[0]);
}

// ===================================================================

class DateTime::_Internal {
 public:
};

DateTime::DateTime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bcl.DateTime)
}
DateTime::DateTime(const DateTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DateTime* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , decltype(_impl_.scale_){}
    , decltype(_impl_.kind_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.value_, &from._impl_.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.kind_) -
    reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.kind_));
  // @@protoc_insertion_point(copy_constructor:bcl.DateTime)
}

inline void DateTime::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){int64_t{0}}
    , decltype(_impl_.scale_){0}
    , decltype(_impl_.kind_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DateTime::~DateTime() {
  // @@protoc_insertion_point(destructor:bcl.DateTime)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DateTime::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DateTime::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DateTime::Clear() {
// @@protoc_insertion_point(message_clear_start:bcl.DateTime)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.kind_) -
      reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.kind_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DateTime::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint64 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bcl.DateTime.TimeSpanScale scale = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_scale(static_cast<::bcl::DateTime_TimeSpanScale>(val));
        } else
          goto handle_unusual;
        continue;
      // .bcl.DateTime.DateTimeKind kind = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_kind(static_cast<::bcl::DateTime_DateTimeKind>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DateTime::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bcl.DateTime)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint64 value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(1, this->_internal_value(), target);
  }

  // .bcl.DateTime.TimeSpanScale scale = 2;
  if (this->_internal_scale() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_scale(), target);
  }

  // .bcl.DateTime.DateTimeKind kind = 3;
  if (this->_internal_kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_kind(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bcl.DateTime)
  return target;
}

size_t DateTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bcl.DateTime)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint64 value = 1;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(this->_internal_value());
  }

  // .bcl.DateTime.TimeSpanScale scale = 2;
  if (this->_internal_scale() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_scale());
  }

  // .bcl.DateTime.DateTimeKind kind = 3;
  if (this->_internal_kind() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_kind());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DateTime::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DateTime::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DateTime::GetClassData() const { return &_class_data_; }


void DateTime::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DateTime*>(&to_msg);
  auto& from = static_cast<const DateTime&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bcl.DateTime)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_scale() != 0) {
    _this->_internal_set_scale(from._internal_scale());
  }
  if (from._internal_kind() != 0) {
    _this->_internal_set_kind(from._internal_kind());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DateTime::CopyFrom(const DateTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bcl.DateTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DateTime::IsInitialized() const {
  return true;
}

void DateTime::InternalSwap(DateTime* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DateTime, _impl_.kind_)
      + sizeof(DateTime::_impl_.kind_)
      - PROTOBUF_FIELD_OFFSET(DateTime, _impl_.value_)>(
          reinterpret_cast<char*>(&_impl_.value_),
          reinterpret_cast<char*>(&other->_impl_.value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DateTime::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bcl_2eproto_getter, &descriptor_table_bcl_2eproto_once,
      file_level_metadata_bcl_2eproto[1]);
}

// ===================================================================

class NetObjectProxy::_Internal {
 public:
};

NetObjectProxy::NetObjectProxy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bcl.NetObjectProxy)
}
NetObjectProxy::NetObjectProxy(const NetObjectProxy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NetObjectProxy* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.typename__){}
    , decltype(_impl_.payload_){}
    , decltype(_impl_.existingobjectkey_){}
    , decltype(_impl_.newobjectkey_){}
    , decltype(_impl_.existingtypekey_){}
    , decltype(_impl_.newtypekey_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.typename__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.typename__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_typename_().empty()) {
    _this->_impl_.typename__.Set(from._internal_typename_(), 
      _this->GetArenaForAllocation());
  }
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload().empty()) {
    _this->_impl_.payload_.Set(from._internal_payload(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.existingobjectkey_, &from._impl_.existingobjectkey_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.newtypekey_) -
    reinterpret_cast<char*>(&_impl_.existingobjectkey_)) + sizeof(_impl_.newtypekey_));
  // @@protoc_insertion_point(copy_constructor:bcl.NetObjectProxy)
}

inline void NetObjectProxy::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.typename__){}
    , decltype(_impl_.payload_){}
    , decltype(_impl_.existingobjectkey_){0}
    , decltype(_impl_.newobjectkey_){0}
    , decltype(_impl_.existingtypekey_){0}
    , decltype(_impl_.newtypekey_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.typename__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.typename__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NetObjectProxy::~NetObjectProxy() {
  // @@protoc_insertion_point(destructor:bcl.NetObjectProxy)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NetObjectProxy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.typename__.Destroy();
  _impl_.payload_.Destroy();
}

void NetObjectProxy::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NetObjectProxy::Clear() {
// @@protoc_insertion_point(message_clear_start:bcl.NetObjectProxy)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.typename__.ClearToEmpty();
  _impl_.payload_.ClearToEmpty();
  ::memset(&_impl_.existingobjectkey_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.newtypekey_) -
      reinterpret_cast<char*>(&_impl_.existingobjectkey_)) + sizeof(_impl_.newtypekey_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetObjectProxy::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 existingObjectKey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.existingobjectkey_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 newObjectKey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.newobjectkey_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 existingTypeKey = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.existingtypekey_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 newTypeKey = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.newtypekey_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string typeName = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_typename_();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bcl.NetObjectProxy.typeName"));
        } else
          goto handle_unusual;
        continue;
      // bytes payload = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetObjectProxy::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bcl.NetObjectProxy)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 existingObjectKey = 1;
  if (this->_internal_existingobjectkey() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_existingobjectkey(), target);
  }

  // int32 newObjectKey = 2;
  if (this->_internal_newobjectkey() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_newobjectkey(), target);
  }

  // int32 existingTypeKey = 3;
  if (this->_internal_existingtypekey() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_existingtypekey(), target);
  }

  // int32 newTypeKey = 4;
  if (this->_internal_newtypekey() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_newtypekey(), target);
  }

  // string typeName = 8;
  if (!this->_internal_typename_().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_typename_().data(), static_cast<int>(this->_internal_typename_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bcl.NetObjectProxy.typeName");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_typename_(), target);
  }

  // bytes payload = 10;
  if (!this->_internal_payload().empty()) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bcl.NetObjectProxy)
  return target;
}

size_t NetObjectProxy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bcl.NetObjectProxy)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string typeName = 8;
  if (!this->_internal_typename_().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_typename_());
  }

  // bytes payload = 10;
  if (!this->_internal_payload().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  // int32 existingObjectKey = 1;
  if (this->_internal_existingobjectkey() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_existingobjectkey());
  }

  // int32 newObjectKey = 2;
  if (this->_internal_newobjectkey() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_newobjectkey());
  }

  // int32 existingTypeKey = 3;
  if (this->_internal_existingtypekey() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_existingtypekey());
  }

  // int32 newTypeKey = 4;
  if (this->_internal_newtypekey() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_newtypekey());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetObjectProxy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NetObjectProxy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetObjectProxy::GetClassData() const { return &_class_data_; }


void NetObjectProxy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NetObjectProxy*>(&to_msg);
  auto& from = static_cast<const NetObjectProxy&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bcl.NetObjectProxy)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_typename_().empty()) {
    _this->_internal_set_typename_(from._internal_typename_());
  }
  if (!from._internal_payload().empty()) {
    _this->_internal_set_payload(from._internal_payload());
  }
  if (from._internal_existingobjectkey() != 0) {
    _this->_internal_set_existingobjectkey(from._internal_existingobjectkey());
  }
  if (from._internal_newobjectkey() != 0) {
    _this->_internal_set_newobjectkey(from._internal_newobjectkey());
  }
  if (from._internal_existingtypekey() != 0) {
    _this->_internal_set_existingtypekey(from._internal_existingtypekey());
  }
  if (from._internal_newtypekey() != 0) {
    _this->_internal_set_newtypekey(from._internal_newtypekey());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetObjectProxy::CopyFrom(const NetObjectProxy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bcl.NetObjectProxy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetObjectProxy::IsInitialized() const {
  return true;
}

void NetObjectProxy::InternalSwap(NetObjectProxy* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.typename__, lhs_arena,
      &other->_impl_.typename__, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.payload_, lhs_arena,
      &other->_impl_.payload_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetObjectProxy, _impl_.newtypekey_)
      + sizeof(NetObjectProxy::_impl_.newtypekey_)
      - PROTOBUF_FIELD_OFFSET(NetObjectProxy, _impl_.existingobjectkey_)>(
          reinterpret_cast<char*>(&_impl_.existingobjectkey_),
          reinterpret_cast<char*>(&other->_impl_.existingobjectkey_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetObjectProxy::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bcl_2eproto_getter, &descriptor_table_bcl_2eproto_once,
      file_level_metadata_bcl_2eproto[2]);
}

// ===================================================================

class Guid::_Internal {
 public:
};

Guid::Guid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bcl.Guid)
}
Guid::Guid(const Guid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Guid* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lo_){}
    , decltype(_impl_.hi_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.lo_, &from._impl_.lo_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hi_) -
    reinterpret_cast<char*>(&_impl_.lo_)) + sizeof(_impl_.hi_));
  // @@protoc_insertion_point(copy_constructor:bcl.Guid)
}

inline void Guid::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lo_){uint64_t{0u}}
    , decltype(_impl_.hi_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Guid::~Guid() {
  // @@protoc_insertion_point(destructor:bcl.Guid)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Guid::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Guid::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Guid::Clear() {
// @@protoc_insertion_point(message_clear_start:bcl.Guid)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.lo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.hi_) -
      reinterpret_cast<char*>(&_impl_.lo_)) + sizeof(_impl_.hi_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Guid::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // fixed64 lo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.lo_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // fixed64 hi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.hi_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Guid::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bcl.Guid)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 lo = 1;
  if (this->_internal_lo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_lo(), target);
  }

  // fixed64 hi = 2;
  if (this->_internal_hi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(2, this->_internal_hi(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bcl.Guid)
  return target;
}

size_t Guid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bcl.Guid)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // fixed64 lo = 1;
  if (this->_internal_lo() != 0) {
    total_size += 1 + 8;
  }

  // fixed64 hi = 2;
  if (this->_internal_hi() != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Guid::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Guid::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Guid::GetClassData() const { return &_class_data_; }


void Guid::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Guid*>(&to_msg);
  auto& from = static_cast<const Guid&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bcl.Guid)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_lo() != 0) {
    _this->_internal_set_lo(from._internal_lo());
  }
  if (from._internal_hi() != 0) {
    _this->_internal_set_hi(from._internal_hi());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Guid::CopyFrom(const Guid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bcl.Guid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Guid::IsInitialized() const {
  return true;
}

void Guid::InternalSwap(Guid* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Guid, _impl_.hi_)
      + sizeof(Guid::_impl_.hi_)
      - PROTOBUF_FIELD_OFFSET(Guid, _impl_.lo_)>(
          reinterpret_cast<char*>(&_impl_.lo_),
          reinterpret_cast<char*>(&other->_impl_.lo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Guid::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bcl_2eproto_getter, &descriptor_table_bcl_2eproto_once,
      file_level_metadata_bcl_2eproto[3]);
}

// ===================================================================

class Decimal::_Internal {
 public:
};

Decimal::Decimal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bcl.Decimal)
}
Decimal::Decimal(const Decimal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Decimal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lo_){}
    , decltype(_impl_.hi_){}
    , decltype(_impl_.signscale_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.lo_, &from._impl_.lo_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.signscale_) -
    reinterpret_cast<char*>(&_impl_.lo_)) + sizeof(_impl_.signscale_));
  // @@protoc_insertion_point(copy_constructor:bcl.Decimal)
}

inline void Decimal::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lo_){uint64_t{0u}}
    , decltype(_impl_.hi_){0u}
    , decltype(_impl_.signscale_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Decimal::~Decimal() {
  // @@protoc_insertion_point(destructor:bcl.Decimal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Decimal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Decimal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Decimal::Clear() {
// @@protoc_insertion_point(message_clear_start:bcl.Decimal)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.lo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.signscale_) -
      reinterpret_cast<char*>(&_impl_.lo_)) + sizeof(_impl_.signscale_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Decimal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 lo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.lo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 hi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.hi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 signScale = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.signscale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Decimal::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bcl.Decimal)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 lo = 1;
  if (this->_internal_lo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_lo(), target);
  }

  // uint32 hi = 2;
  if (this->_internal_hi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hi(), target);
  }

  // uint32 signScale = 3;
  if (this->_internal_signscale() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_signscale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bcl.Decimal)
  return target;
}

size_t Decimal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bcl.Decimal)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 lo = 1;
  if (this->_internal_lo() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_lo());
  }

  // uint32 hi = 2;
  if (this->_internal_hi() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hi());
  }

  // uint32 signScale = 3;
  if (this->_internal_signscale() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_signscale());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Decimal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Decimal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Decimal::GetClassData() const { return &_class_data_; }


void Decimal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Decimal*>(&to_msg);
  auto& from = static_cast<const Decimal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bcl.Decimal)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_lo() != 0) {
    _this->_internal_set_lo(from._internal_lo());
  }
  if (from._internal_hi() != 0) {
    _this->_internal_set_hi(from._internal_hi());
  }
  if (from._internal_signscale() != 0) {
    _this->_internal_set_signscale(from._internal_signscale());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Decimal::CopyFrom(const Decimal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bcl.Decimal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Decimal::IsInitialized() const {
  return true;
}

void Decimal::InternalSwap(Decimal* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Decimal, _impl_.signscale_)
      + sizeof(Decimal::_impl_.signscale_)
      - PROTOBUF_FIELD_OFFSET(Decimal, _impl_.lo_)>(
          reinterpret_cast<char*>(&_impl_.lo_),
          reinterpret_cast<char*>(&other->_impl_.lo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Decimal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bcl_2eproto_getter, &descriptor_table_bcl_2eproto_once,
      file_level_metadata_bcl_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace bcl
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bcl::TimeSpan*
Arena::CreateMaybeMessage< ::bcl::TimeSpan >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bcl::TimeSpan >(arena);
}
template<> PROTOBUF_NOINLINE ::bcl::DateTime*
Arena::CreateMaybeMessage< ::bcl::DateTime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bcl::DateTime >(arena);
}
template<> PROTOBUF_NOINLINE ::bcl::NetObjectProxy*
Arena::CreateMaybeMessage< ::bcl::NetObjectProxy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bcl::NetObjectProxy >(arena);
}
template<> PROTOBUF_NOINLINE ::bcl::Guid*
Arena::CreateMaybeMessage< ::bcl::Guid >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bcl::Guid >(arena);
}
template<> PROTOBUF_NOINLINE ::bcl::Decimal*
Arena::CreateMaybeMessage< ::bcl::Decimal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bcl::Decimal >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
