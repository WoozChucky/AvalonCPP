// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SPlayerPositionUpdatePacket.proto

#include "Proto/SPlayerPositionUpdatePacket.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Avalon {
namespace Network {
namespace Packets {
namespace Movement {
PROTOBUF_CONSTEXPR SPlayerPacket::SPlayerPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.accountid_)*/0
  , /*decltype(_impl_.characterid_)*/0
  , /*decltype(_impl_.positionx_)*/0
  , /*decltype(_impl_.positiony_)*/0
  , /*decltype(_impl_.velocityx_)*/0
  , /*decltype(_impl_.velocityy_)*/0
  , /*decltype(_impl_.chatting_)*/false
  , /*decltype(_impl_.elapsed_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SPlayerPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SPlayerPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SPlayerPacketDefaultTypeInternal() {}
  union {
    SPlayerPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SPlayerPacketDefaultTypeInternal _SPlayerPacket_default_instance_;
PROTOBUF_CONSTEXPR SPlayerPositionUpdatePacket::SPlayerPositionUpdatePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.players_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SPlayerPositionUpdatePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SPlayerPositionUpdatePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SPlayerPositionUpdatePacketDefaultTypeInternal() {}
  union {
    SPlayerPositionUpdatePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SPlayerPositionUpdatePacketDefaultTypeInternal _SPlayerPositionUpdatePacket_default_instance_;
}  // namespace Movement
}  // namespace Packets
}  // namespace Network
}  // namespace Avalon
static ::_pb::Metadata file_level_metadata_SPlayerPositionUpdatePacket_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_SPlayerPositionUpdatePacket_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_SPlayerPositionUpdatePacket_2eproto = nullptr;

const uint32_t TableStruct_SPlayerPositionUpdatePacket_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Avalon::Network::Packets::Movement::SPlayerPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Avalon::Network::Packets::Movement::SPlayerPacket, _impl_.accountid_),
  PROTOBUF_FIELD_OFFSET(::Avalon::Network::Packets::Movement::SPlayerPacket, _impl_.characterid_),
  PROTOBUF_FIELD_OFFSET(::Avalon::Network::Packets::Movement::SPlayerPacket, _impl_.positionx_),
  PROTOBUF_FIELD_OFFSET(::Avalon::Network::Packets::Movement::SPlayerPacket, _impl_.positiony_),
  PROTOBUF_FIELD_OFFSET(::Avalon::Network::Packets::Movement::SPlayerPacket, _impl_.velocityx_),
  PROTOBUF_FIELD_OFFSET(::Avalon::Network::Packets::Movement::SPlayerPacket, _impl_.velocityy_),
  PROTOBUF_FIELD_OFFSET(::Avalon::Network::Packets::Movement::SPlayerPacket, _impl_.chatting_),
  PROTOBUF_FIELD_OFFSET(::Avalon::Network::Packets::Movement::SPlayerPacket, _impl_.elapsed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Avalon::Network::Packets::Movement::SPlayerPositionUpdatePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Avalon::Network::Packets::Movement::SPlayerPositionUpdatePacket, _impl_.players_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Avalon::Network::Packets::Movement::SPlayerPacket)},
  { 14, -1, -1, sizeof(::Avalon::Network::Packets::Movement::SPlayerPositionUpdatePacket)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Avalon::Network::Packets::Movement::_SPlayerPacket_default_instance_._instance,
  &::Avalon::Network::Packets::Movement::_SPlayerPositionUpdatePacket_default_instance_._instance,
};

const char descriptor_table_protodef_SPlayerPositionUpdatePacket_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!SPlayerPositionUpdatePacket.proto\022\037Ava"
  "lon.Network.Packets.Movement\"\246\001\n\rSPlayer"
  "Packet\022\021\n\tAccountId\030\001 \001(\005\022\023\n\013CharacterId"
  "\030\002 \001(\005\022\021\n\tPositionX\030\003 \001(\002\022\021\n\tPositionY\030\004"
  " \001(\002\022\021\n\tVelocityX\030\005 \001(\002\022\021\n\tVelocityY\030\006 \001"
  "(\002\022\020\n\010Chatting\030\007 \001(\010\022\017\n\007Elapsed\030\010 \001(\002\"^\n"
  "\033SPlayerPositionUpdatePacket\022\?\n\007Players\030"
  "\001 \003(\0132..Avalon.Network.Packets.Movement."
  "SPlayerPacketb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_SPlayerPositionUpdatePacket_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_SPlayerPositionUpdatePacket_2eproto = {
    false, false, 341, descriptor_table_protodef_SPlayerPositionUpdatePacket_2eproto,
    "SPlayerPositionUpdatePacket.proto",
    &descriptor_table_SPlayerPositionUpdatePacket_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_SPlayerPositionUpdatePacket_2eproto::offsets,
    file_level_metadata_SPlayerPositionUpdatePacket_2eproto, file_level_enum_descriptors_SPlayerPositionUpdatePacket_2eproto,
    file_level_service_descriptors_SPlayerPositionUpdatePacket_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_SPlayerPositionUpdatePacket_2eproto_getter() {
  return &descriptor_table_SPlayerPositionUpdatePacket_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_SPlayerPositionUpdatePacket_2eproto(&descriptor_table_SPlayerPositionUpdatePacket_2eproto);
namespace Avalon {
namespace Network {
namespace Packets {
namespace Movement {

// ===================================================================

class SPlayerPacket::_Internal {
 public:
};

SPlayerPacket::SPlayerPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Avalon.Network.Packets.Movement.SPlayerPacket)
}
SPlayerPacket::SPlayerPacket(const SPlayerPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SPlayerPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.accountid_){}
    , decltype(_impl_.characterid_){}
    , decltype(_impl_.positionx_){}
    , decltype(_impl_.positiony_){}
    , decltype(_impl_.velocityx_){}
    , decltype(_impl_.velocityy_){}
    , decltype(_impl_.chatting_){}
    , decltype(_impl_.elapsed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.accountid_, &from._impl_.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.elapsed_) -
    reinterpret_cast<char*>(&_impl_.accountid_)) + sizeof(_impl_.elapsed_));
  // @@protoc_insertion_point(copy_constructor:Avalon.Network.Packets.Movement.SPlayerPacket)
}

inline void SPlayerPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.accountid_){0}
    , decltype(_impl_.characterid_){0}
    , decltype(_impl_.positionx_){0}
    , decltype(_impl_.positiony_){0}
    , decltype(_impl_.velocityx_){0}
    , decltype(_impl_.velocityy_){0}
    , decltype(_impl_.chatting_){false}
    , decltype(_impl_.elapsed_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SPlayerPacket::~SPlayerPacket() {
  // @@protoc_insertion_point(destructor:Avalon.Network.Packets.Movement.SPlayerPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SPlayerPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SPlayerPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SPlayerPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:Avalon.Network.Packets.Movement.SPlayerPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.elapsed_) -
      reinterpret_cast<char*>(&_impl_.accountid_)) + sizeof(_impl_.elapsed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SPlayerPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 AccountId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 CharacterId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.characterid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float PositionX = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.positionx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float PositionY = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.positiony_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float VelocityX = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.velocityx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float VelocityY = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.velocityy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bool Chatting = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.chatting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float Elapsed = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.elapsed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SPlayerPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Avalon.Network.Packets.Movement.SPlayerPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 AccountId = 1;
  if (this->_internal_accountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_accountid(), target);
  }

  // int32 CharacterId = 2;
  if (this->_internal_characterid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_characterid(), target);
  }

  // float PositionX = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_positionx = this->_internal_positionx();
  uint32_t raw_positionx;
  memcpy(&raw_positionx, &tmp_positionx, sizeof(tmp_positionx));
  if (raw_positionx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_positionx(), target);
  }

  // float PositionY = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_positiony = this->_internal_positiony();
  uint32_t raw_positiony;
  memcpy(&raw_positiony, &tmp_positiony, sizeof(tmp_positiony));
  if (raw_positiony != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_positiony(), target);
  }

  // float VelocityX = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_velocityx = this->_internal_velocityx();
  uint32_t raw_velocityx;
  memcpy(&raw_velocityx, &tmp_velocityx, sizeof(tmp_velocityx));
  if (raw_velocityx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_velocityx(), target);
  }

  // float VelocityY = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_velocityy = this->_internal_velocityy();
  uint32_t raw_velocityy;
  memcpy(&raw_velocityy, &tmp_velocityy, sizeof(tmp_velocityy));
  if (raw_velocityy != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_velocityy(), target);
  }

  // bool Chatting = 7;
  if (this->_internal_chatting() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_chatting(), target);
  }

  // float Elapsed = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_elapsed = this->_internal_elapsed();
  uint32_t raw_elapsed;
  memcpy(&raw_elapsed, &tmp_elapsed, sizeof(tmp_elapsed));
  if (raw_elapsed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_elapsed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Avalon.Network.Packets.Movement.SPlayerPacket)
  return target;
}

size_t SPlayerPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Avalon.Network.Packets.Movement.SPlayerPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 AccountId = 1;
  if (this->_internal_accountid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_accountid());
  }

  // int32 CharacterId = 2;
  if (this->_internal_characterid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_characterid());
  }

  // float PositionX = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_positionx = this->_internal_positionx();
  uint32_t raw_positionx;
  memcpy(&raw_positionx, &tmp_positionx, sizeof(tmp_positionx));
  if (raw_positionx != 0) {
    total_size += 1 + 4;
  }

  // float PositionY = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_positiony = this->_internal_positiony();
  uint32_t raw_positiony;
  memcpy(&raw_positiony, &tmp_positiony, sizeof(tmp_positiony));
  if (raw_positiony != 0) {
    total_size += 1 + 4;
  }

  // float VelocityX = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_velocityx = this->_internal_velocityx();
  uint32_t raw_velocityx;
  memcpy(&raw_velocityx, &tmp_velocityx, sizeof(tmp_velocityx));
  if (raw_velocityx != 0) {
    total_size += 1 + 4;
  }

  // float VelocityY = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_velocityy = this->_internal_velocityy();
  uint32_t raw_velocityy;
  memcpy(&raw_velocityy, &tmp_velocityy, sizeof(tmp_velocityy));
  if (raw_velocityy != 0) {
    total_size += 1 + 4;
  }

  // bool Chatting = 7;
  if (this->_internal_chatting() != 0) {
    total_size += 1 + 1;
  }

  // float Elapsed = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_elapsed = this->_internal_elapsed();
  uint32_t raw_elapsed;
  memcpy(&raw_elapsed, &tmp_elapsed, sizeof(tmp_elapsed));
  if (raw_elapsed != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SPlayerPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SPlayerPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SPlayerPacket::GetClassData() const { return &_class_data_; }


void SPlayerPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SPlayerPacket*>(&to_msg);
  auto& from = static_cast<const SPlayerPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Avalon.Network.Packets.Movement.SPlayerPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_accountid() != 0) {
    _this->_internal_set_accountid(from._internal_accountid());
  }
  if (from._internal_characterid() != 0) {
    _this->_internal_set_characterid(from._internal_characterid());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_positionx = from._internal_positionx();
  uint32_t raw_positionx;
  memcpy(&raw_positionx, &tmp_positionx, sizeof(tmp_positionx));
  if (raw_positionx != 0) {
    _this->_internal_set_positionx(from._internal_positionx());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_positiony = from._internal_positiony();
  uint32_t raw_positiony;
  memcpy(&raw_positiony, &tmp_positiony, sizeof(tmp_positiony));
  if (raw_positiony != 0) {
    _this->_internal_set_positiony(from._internal_positiony());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_velocityx = from._internal_velocityx();
  uint32_t raw_velocityx;
  memcpy(&raw_velocityx, &tmp_velocityx, sizeof(tmp_velocityx));
  if (raw_velocityx != 0) {
    _this->_internal_set_velocityx(from._internal_velocityx());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_velocityy = from._internal_velocityy();
  uint32_t raw_velocityy;
  memcpy(&raw_velocityy, &tmp_velocityy, sizeof(tmp_velocityy));
  if (raw_velocityy != 0) {
    _this->_internal_set_velocityy(from._internal_velocityy());
  }
  if (from._internal_chatting() != 0) {
    _this->_internal_set_chatting(from._internal_chatting());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_elapsed = from._internal_elapsed();
  uint32_t raw_elapsed;
  memcpy(&raw_elapsed, &tmp_elapsed, sizeof(tmp_elapsed));
  if (raw_elapsed != 0) {
    _this->_internal_set_elapsed(from._internal_elapsed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SPlayerPacket::CopyFrom(const SPlayerPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Avalon.Network.Packets.Movement.SPlayerPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SPlayerPacket::IsInitialized() const {
  return true;
}

void SPlayerPacket::InternalSwap(SPlayerPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SPlayerPacket, _impl_.elapsed_)
      + sizeof(SPlayerPacket::_impl_.elapsed_)
      - PROTOBUF_FIELD_OFFSET(SPlayerPacket, _impl_.accountid_)>(
          reinterpret_cast<char*>(&_impl_.accountid_),
          reinterpret_cast<char*>(&other->_impl_.accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SPlayerPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_SPlayerPositionUpdatePacket_2eproto_getter, &descriptor_table_SPlayerPositionUpdatePacket_2eproto_once,
      file_level_metadata_SPlayerPositionUpdatePacket_2eproto[0]);
}

// ===================================================================

class SPlayerPositionUpdatePacket::_Internal {
 public:
};

SPlayerPositionUpdatePacket::SPlayerPositionUpdatePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Avalon.Network.Packets.Movement.SPlayerPositionUpdatePacket)
}
SPlayerPositionUpdatePacket::SPlayerPositionUpdatePacket(const SPlayerPositionUpdatePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SPlayerPositionUpdatePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){from._impl_.players_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Avalon.Network.Packets.Movement.SPlayerPositionUpdatePacket)
}

inline void SPlayerPositionUpdatePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SPlayerPositionUpdatePacket::~SPlayerPositionUpdatePacket() {
  // @@protoc_insertion_point(destructor:Avalon.Network.Packets.Movement.SPlayerPositionUpdatePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SPlayerPositionUpdatePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedPtrField();
}

void SPlayerPositionUpdatePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SPlayerPositionUpdatePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:Avalon.Network.Packets.Movement.SPlayerPositionUpdatePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SPlayerPositionUpdatePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Avalon.Network.Packets.Movement.SPlayerPacket Players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SPlayerPositionUpdatePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Avalon.Network.Packets.Movement.SPlayerPositionUpdatePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Avalon.Network.Packets.Movement.SPlayerPacket Players = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Avalon.Network.Packets.Movement.SPlayerPositionUpdatePacket)
  return target;
}

size_t SPlayerPositionUpdatePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Avalon.Network.Packets.Movement.SPlayerPositionUpdatePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Avalon.Network.Packets.Movement.SPlayerPacket Players = 1;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_impl_.players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SPlayerPositionUpdatePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SPlayerPositionUpdatePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SPlayerPositionUpdatePacket::GetClassData() const { return &_class_data_; }


void SPlayerPositionUpdatePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SPlayerPositionUpdatePacket*>(&to_msg);
  auto& from = static_cast<const SPlayerPositionUpdatePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Avalon.Network.Packets.Movement.SPlayerPositionUpdatePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SPlayerPositionUpdatePacket::CopyFrom(const SPlayerPositionUpdatePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Avalon.Network.Packets.Movement.SPlayerPositionUpdatePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SPlayerPositionUpdatePacket::IsInitialized() const {
  return true;
}

void SPlayerPositionUpdatePacket::InternalSwap(SPlayerPositionUpdatePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SPlayerPositionUpdatePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_SPlayerPositionUpdatePacket_2eproto_getter, &descriptor_table_SPlayerPositionUpdatePacket_2eproto_once,
      file_level_metadata_SPlayerPositionUpdatePacket_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Movement
}  // namespace Packets
}  // namespace Network
}  // namespace Avalon
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Avalon::Network::Packets::Movement::SPlayerPacket*
Arena::CreateMaybeMessage< ::Avalon::Network::Packets::Movement::SPlayerPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Avalon::Network::Packets::Movement::SPlayerPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::Avalon::Network::Packets::Movement::SPlayerPositionUpdatePacket*
Arena::CreateMaybeMessage< ::Avalon::Network::Packets::Movement::SPlayerPositionUpdatePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Avalon::Network::Packets::Movement::SPlayerPositionUpdatePacket >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
