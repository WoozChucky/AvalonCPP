// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SCharacterSelectedPacket.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_SCharacterSelectedPacket_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_SCharacterSelectedPacket_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "bcl.pb.h"
#include "SCharacterListPacket.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_SCharacterSelectedPacket_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_SCharacterSelectedPacket_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SCharacterSelectedPacket_2eproto;
namespace Avalon {
namespace Network {
namespace Packets {
namespace Character {
class MapInfo;
struct MapInfoDefaultTypeInternal;
extern MapInfoDefaultTypeInternal _MapInfo_default_instance_;
class SCharacterSelectedPacket;
struct SCharacterSelectedPacketDefaultTypeInternal;
extern SCharacterSelectedPacketDefaultTypeInternal _SCharacterSelectedPacket_default_instance_;
}  // namespace Character
}  // namespace Packets
}  // namespace Network
}  // namespace Avalon
PROTOBUF_NAMESPACE_OPEN
template<> ::Avalon::Network::Packets::Character::MapInfo* Arena::CreateMaybeMessage<::Avalon::Network::Packets::Character::MapInfo>(Arena*);
template<> ::Avalon::Network::Packets::Character::SCharacterSelectedPacket* Arena::CreateMaybeMessage<::Avalon::Network::Packets::Character::SCharacterSelectedPacket>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Avalon {
namespace Network {
namespace Packets {
namespace Character {

// ===================================================================

class MapInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Avalon.Network.Packets.Character.MapInfo) */ {
 public:
  inline MapInfo() : MapInfo(nullptr) {}
  ~MapInfo() override;
  explicit PROTOBUF_CONSTEXPR MapInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MapInfo(const MapInfo& from);
  MapInfo(MapInfo&& from) noexcept
    : MapInfo() {
    *this = ::std::move(from);
  }

  inline MapInfo& operator=(const MapInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapInfo& operator=(MapInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MapInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const MapInfo* internal_default_instance() {
    return reinterpret_cast<const MapInfo*>(
               &_MapInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MapInfo& a, MapInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MapInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MapInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MapInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MapInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MapInfo& from) {
    MapInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Avalon.Network.Packets.Character.MapInfo";
  }
  protected:
  explicit MapInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTilesetsDataFieldNumber = 8,
    kNameFieldNumber = 3,
    kDescriptionFieldNumber = 4,
    kAtlasFieldNumber = 5,
    kDirectoryFieldNumber = 6,
    kDataFieldNumber = 7,
    kInstanceIdFieldNumber = 2,
    kMapIdFieldNumber = 1,
  };
  // repeated bytes TilesetsData = 8;
  int tilesetsdata_size() const;
  private:
  int _internal_tilesetsdata_size() const;
  public:
  void clear_tilesetsdata();
  const std::string& tilesetsdata(int index) const;
  std::string* mutable_tilesetsdata(int index);
  void set_tilesetsdata(int index, const std::string& value);
  void set_tilesetsdata(int index, std::string&& value);
  void set_tilesetsdata(int index, const char* value);
  void set_tilesetsdata(int index, const void* value, size_t size);
  std::string* add_tilesetsdata();
  void add_tilesetsdata(const std::string& value);
  void add_tilesetsdata(std::string&& value);
  void add_tilesetsdata(const char* value);
  void add_tilesetsdata(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tilesetsdata() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tilesetsdata();
  private:
  const std::string& _internal_tilesetsdata(int index) const;
  std::string* _internal_add_tilesetsdata();
  public:

  // string Name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string Description = 4;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string Atlas = 5;
  void clear_atlas();
  const std::string& atlas() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_atlas(ArgT0&& arg0, ArgT... args);
  std::string* mutable_atlas();
  PROTOBUF_NODISCARD std::string* release_atlas();
  void set_allocated_atlas(std::string* atlas);
  private:
  const std::string& _internal_atlas() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_atlas(const std::string& value);
  std::string* _internal_mutable_atlas();
  public:

  // string Directory = 6;
  void clear_directory();
  const std::string& directory() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_directory(ArgT0&& arg0, ArgT... args);
  std::string* mutable_directory();
  PROTOBUF_NODISCARD std::string* release_directory();
  void set_allocated_directory(std::string* directory);
  private:
  const std::string& _internal_directory() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_directory(const std::string& value);
  std::string* _internal_mutable_directory();
  public:

  // bytes Data = 7;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .bcl.Guid InstanceId = 2;
  bool has_instanceid() const;
  private:
  bool _internal_has_instanceid() const;
  public:
  void clear_instanceid();
  const ::bcl::Guid& instanceid() const;
  PROTOBUF_NODISCARD ::bcl::Guid* release_instanceid();
  ::bcl::Guid* mutable_instanceid();
  void set_allocated_instanceid(::bcl::Guid* instanceid);
  private:
  const ::bcl::Guid& _internal_instanceid() const;
  ::bcl::Guid* _internal_mutable_instanceid();
  public:
  void unsafe_arena_set_allocated_instanceid(
      ::bcl::Guid* instanceid);
  ::bcl::Guid* unsafe_arena_release_instanceid();

  // int32 MapId = 1;
  void clear_mapid();
  int32_t mapid() const;
  void set_mapid(int32_t value);
  private:
  int32_t _internal_mapid() const;
  void _internal_set_mapid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Avalon.Network.Packets.Character.MapInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tilesetsdata_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr atlas_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr directory_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    ::bcl::Guid* instanceid_;
    int32_t mapid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_SCharacterSelectedPacket_2eproto;
};
// -------------------------------------------------------------------

class SCharacterSelectedPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Avalon.Network.Packets.Character.SCharacterSelectedPacket) */ {
 public:
  inline SCharacterSelectedPacket() : SCharacterSelectedPacket(nullptr) {}
  ~SCharacterSelectedPacket() override;
  explicit PROTOBUF_CONSTEXPR SCharacterSelectedPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SCharacterSelectedPacket(const SCharacterSelectedPacket& from);
  SCharacterSelectedPacket(SCharacterSelectedPacket&& from) noexcept
    : SCharacterSelectedPacket() {
    *this = ::std::move(from);
  }

  inline SCharacterSelectedPacket& operator=(const SCharacterSelectedPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCharacterSelectedPacket& operator=(SCharacterSelectedPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SCharacterSelectedPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const SCharacterSelectedPacket* internal_default_instance() {
    return reinterpret_cast<const SCharacterSelectedPacket*>(
               &_SCharacterSelectedPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SCharacterSelectedPacket& a, SCharacterSelectedPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(SCharacterSelectedPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCharacterSelectedPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SCharacterSelectedPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SCharacterSelectedPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SCharacterSelectedPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SCharacterSelectedPacket& from) {
    SCharacterSelectedPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCharacterSelectedPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Avalon.Network.Packets.Character.SCharacterSelectedPacket";
  }
  protected:
  explicit SCharacterSelectedPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterFieldNumber = 1,
    kMapFieldNumber = 2,
  };
  // .Avalon.Network.Packets.Character.CharacterInfo Character = 1;
  bool has_character() const;
  private:
  bool _internal_has_character() const;
  public:
  void clear_character();
  const ::Avalon::Network::Packets::Character::CharacterInfo& character() const;
  PROTOBUF_NODISCARD ::Avalon::Network::Packets::Character::CharacterInfo* release_character();
  ::Avalon::Network::Packets::Character::CharacterInfo* mutable_character();
  void set_allocated_character(::Avalon::Network::Packets::Character::CharacterInfo* character);
  private:
  const ::Avalon::Network::Packets::Character::CharacterInfo& _internal_character() const;
  ::Avalon::Network::Packets::Character::CharacterInfo* _internal_mutable_character();
  public:
  void unsafe_arena_set_allocated_character(
      ::Avalon::Network::Packets::Character::CharacterInfo* character);
  ::Avalon::Network::Packets::Character::CharacterInfo* unsafe_arena_release_character();

  // .Avalon.Network.Packets.Character.MapInfo Map = 2;
  bool has_map() const;
  private:
  bool _internal_has_map() const;
  public:
  void clear_map();
  const ::Avalon::Network::Packets::Character::MapInfo& map() const;
  PROTOBUF_NODISCARD ::Avalon::Network::Packets::Character::MapInfo* release_map();
  ::Avalon::Network::Packets::Character::MapInfo* mutable_map();
  void set_allocated_map(::Avalon::Network::Packets::Character::MapInfo* map);
  private:
  const ::Avalon::Network::Packets::Character::MapInfo& _internal_map() const;
  ::Avalon::Network::Packets::Character::MapInfo* _internal_mutable_map();
  public:
  void unsafe_arena_set_allocated_map(
      ::Avalon::Network::Packets::Character::MapInfo* map);
  ::Avalon::Network::Packets::Character::MapInfo* unsafe_arena_release_map();

  // @@protoc_insertion_point(class_scope:Avalon.Network.Packets.Character.SCharacterSelectedPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Avalon::Network::Packets::Character::CharacterInfo* character_;
    ::Avalon::Network::Packets::Character::MapInfo* map_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_SCharacterSelectedPacket_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MapInfo

// int32 MapId = 1;
inline void MapInfo::clear_mapid() {
  _impl_.mapid_ = 0;
}
inline int32_t MapInfo::_internal_mapid() const {
  return _impl_.mapid_;
}
inline int32_t MapInfo::mapid() const {
  // @@protoc_insertion_point(field_get:Avalon.Network.Packets.Character.MapInfo.MapId)
  return _internal_mapid();
}
inline void MapInfo::_internal_set_mapid(int32_t value) {
  
  _impl_.mapid_ = value;
}
inline void MapInfo::set_mapid(int32_t value) {
  _internal_set_mapid(value);
  // @@protoc_insertion_point(field_set:Avalon.Network.Packets.Character.MapInfo.MapId)
}

// .bcl.Guid InstanceId = 2;
inline bool MapInfo::_internal_has_instanceid() const {
  return this != internal_default_instance() && _impl_.instanceid_ != nullptr;
}
inline bool MapInfo::has_instanceid() const {
  return _internal_has_instanceid();
}
inline const ::bcl::Guid& MapInfo::_internal_instanceid() const {
  const ::bcl::Guid* p = _impl_.instanceid_;
  return p != nullptr ? *p : reinterpret_cast<const ::bcl::Guid&>(
      ::bcl::_Guid_default_instance_);
}
inline const ::bcl::Guid& MapInfo::instanceid() const {
  // @@protoc_insertion_point(field_get:Avalon.Network.Packets.Character.MapInfo.InstanceId)
  return _internal_instanceid();
}
inline void MapInfo::unsafe_arena_set_allocated_instanceid(
    ::bcl::Guid* instanceid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.instanceid_);
  }
  _impl_.instanceid_ = instanceid;
  if (instanceid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Avalon.Network.Packets.Character.MapInfo.InstanceId)
}
inline ::bcl::Guid* MapInfo::release_instanceid() {
  
  ::bcl::Guid* temp = _impl_.instanceid_;
  _impl_.instanceid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bcl::Guid* MapInfo::unsafe_arena_release_instanceid() {
  // @@protoc_insertion_point(field_release:Avalon.Network.Packets.Character.MapInfo.InstanceId)
  
  ::bcl::Guid* temp = _impl_.instanceid_;
  _impl_.instanceid_ = nullptr;
  return temp;
}
inline ::bcl::Guid* MapInfo::_internal_mutable_instanceid() {
  
  if (_impl_.instanceid_ == nullptr) {
    auto* p = CreateMaybeMessage<::bcl::Guid>(GetArenaForAllocation());
    _impl_.instanceid_ = p;
  }
  return _impl_.instanceid_;
}
inline ::bcl::Guid* MapInfo::mutable_instanceid() {
  ::bcl::Guid* _msg = _internal_mutable_instanceid();
  // @@protoc_insertion_point(field_mutable:Avalon.Network.Packets.Character.MapInfo.InstanceId)
  return _msg;
}
inline void MapInfo::set_allocated_instanceid(::bcl::Guid* instanceid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.instanceid_);
  }
  if (instanceid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(instanceid));
    if (message_arena != submessage_arena) {
      instanceid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, instanceid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.instanceid_ = instanceid;
  // @@protoc_insertion_point(field_set_allocated:Avalon.Network.Packets.Character.MapInfo.InstanceId)
}

// string Name = 3;
inline void MapInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& MapInfo::name() const {
  // @@protoc_insertion_point(field_get:Avalon.Network.Packets.Character.MapInfo.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MapInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Avalon.Network.Packets.Character.MapInfo.Name)
}
inline std::string* MapInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Avalon.Network.Packets.Character.MapInfo.Name)
  return _s;
}
inline const std::string& MapInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void MapInfo::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* MapInfo::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* MapInfo::release_name() {
  // @@protoc_insertion_point(field_release:Avalon.Network.Packets.Character.MapInfo.Name)
  return _impl_.name_.Release();
}
inline void MapInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Avalon.Network.Packets.Character.MapInfo.Name)
}

// string Description = 4;
inline void MapInfo::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& MapInfo::description() const {
  // @@protoc_insertion_point(field_get:Avalon.Network.Packets.Character.MapInfo.Description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MapInfo::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Avalon.Network.Packets.Character.MapInfo.Description)
}
inline std::string* MapInfo::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:Avalon.Network.Packets.Character.MapInfo.Description)
  return _s;
}
inline const std::string& MapInfo::_internal_description() const {
  return _impl_.description_.Get();
}
inline void MapInfo::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* MapInfo::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* MapInfo::release_description() {
  // @@protoc_insertion_point(field_release:Avalon.Network.Packets.Character.MapInfo.Description)
  return _impl_.description_.Release();
}
inline void MapInfo::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Avalon.Network.Packets.Character.MapInfo.Description)
}

// string Atlas = 5;
inline void MapInfo::clear_atlas() {
  _impl_.atlas_.ClearToEmpty();
}
inline const std::string& MapInfo::atlas() const {
  // @@protoc_insertion_point(field_get:Avalon.Network.Packets.Character.MapInfo.Atlas)
  return _internal_atlas();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MapInfo::set_atlas(ArgT0&& arg0, ArgT... args) {
 
 _impl_.atlas_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Avalon.Network.Packets.Character.MapInfo.Atlas)
}
inline std::string* MapInfo::mutable_atlas() {
  std::string* _s = _internal_mutable_atlas();
  // @@protoc_insertion_point(field_mutable:Avalon.Network.Packets.Character.MapInfo.Atlas)
  return _s;
}
inline const std::string& MapInfo::_internal_atlas() const {
  return _impl_.atlas_.Get();
}
inline void MapInfo::_internal_set_atlas(const std::string& value) {
  
  _impl_.atlas_.Set(value, GetArenaForAllocation());
}
inline std::string* MapInfo::_internal_mutable_atlas() {
  
  return _impl_.atlas_.Mutable(GetArenaForAllocation());
}
inline std::string* MapInfo::release_atlas() {
  // @@protoc_insertion_point(field_release:Avalon.Network.Packets.Character.MapInfo.Atlas)
  return _impl_.atlas_.Release();
}
inline void MapInfo::set_allocated_atlas(std::string* atlas) {
  if (atlas != nullptr) {
    
  } else {
    
  }
  _impl_.atlas_.SetAllocated(atlas, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.atlas_.IsDefault()) {
    _impl_.atlas_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Avalon.Network.Packets.Character.MapInfo.Atlas)
}

// string Directory = 6;
inline void MapInfo::clear_directory() {
  _impl_.directory_.ClearToEmpty();
}
inline const std::string& MapInfo::directory() const {
  // @@protoc_insertion_point(field_get:Avalon.Network.Packets.Character.MapInfo.Directory)
  return _internal_directory();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MapInfo::set_directory(ArgT0&& arg0, ArgT... args) {
 
 _impl_.directory_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Avalon.Network.Packets.Character.MapInfo.Directory)
}
inline std::string* MapInfo::mutable_directory() {
  std::string* _s = _internal_mutable_directory();
  // @@protoc_insertion_point(field_mutable:Avalon.Network.Packets.Character.MapInfo.Directory)
  return _s;
}
inline const std::string& MapInfo::_internal_directory() const {
  return _impl_.directory_.Get();
}
inline void MapInfo::_internal_set_directory(const std::string& value) {
  
  _impl_.directory_.Set(value, GetArenaForAllocation());
}
inline std::string* MapInfo::_internal_mutable_directory() {
  
  return _impl_.directory_.Mutable(GetArenaForAllocation());
}
inline std::string* MapInfo::release_directory() {
  // @@protoc_insertion_point(field_release:Avalon.Network.Packets.Character.MapInfo.Directory)
  return _impl_.directory_.Release();
}
inline void MapInfo::set_allocated_directory(std::string* directory) {
  if (directory != nullptr) {
    
  } else {
    
  }
  _impl_.directory_.SetAllocated(directory, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.directory_.IsDefault()) {
    _impl_.directory_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Avalon.Network.Packets.Character.MapInfo.Directory)
}

// bytes Data = 7;
inline void MapInfo::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& MapInfo::data() const {
  // @@protoc_insertion_point(field_get:Avalon.Network.Packets.Character.MapInfo.Data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MapInfo::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Avalon.Network.Packets.Character.MapInfo.Data)
}
inline std::string* MapInfo::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:Avalon.Network.Packets.Character.MapInfo.Data)
  return _s;
}
inline const std::string& MapInfo::_internal_data() const {
  return _impl_.data_.Get();
}
inline void MapInfo::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* MapInfo::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* MapInfo::release_data() {
  // @@protoc_insertion_point(field_release:Avalon.Network.Packets.Character.MapInfo.Data)
  return _impl_.data_.Release();
}
inline void MapInfo::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Avalon.Network.Packets.Character.MapInfo.Data)
}

// repeated bytes TilesetsData = 8;
inline int MapInfo::_internal_tilesetsdata_size() const {
  return _impl_.tilesetsdata_.size();
}
inline int MapInfo::tilesetsdata_size() const {
  return _internal_tilesetsdata_size();
}
inline void MapInfo::clear_tilesetsdata() {
  _impl_.tilesetsdata_.Clear();
}
inline std::string* MapInfo::add_tilesetsdata() {
  std::string* _s = _internal_add_tilesetsdata();
  // @@protoc_insertion_point(field_add_mutable:Avalon.Network.Packets.Character.MapInfo.TilesetsData)
  return _s;
}
inline const std::string& MapInfo::_internal_tilesetsdata(int index) const {
  return _impl_.tilesetsdata_.Get(index);
}
inline const std::string& MapInfo::tilesetsdata(int index) const {
  // @@protoc_insertion_point(field_get:Avalon.Network.Packets.Character.MapInfo.TilesetsData)
  return _internal_tilesetsdata(index);
}
inline std::string* MapInfo::mutable_tilesetsdata(int index) {
  // @@protoc_insertion_point(field_mutable:Avalon.Network.Packets.Character.MapInfo.TilesetsData)
  return _impl_.tilesetsdata_.Mutable(index);
}
inline void MapInfo::set_tilesetsdata(int index, const std::string& value) {
  _impl_.tilesetsdata_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Avalon.Network.Packets.Character.MapInfo.TilesetsData)
}
inline void MapInfo::set_tilesetsdata(int index, std::string&& value) {
  _impl_.tilesetsdata_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Avalon.Network.Packets.Character.MapInfo.TilesetsData)
}
inline void MapInfo::set_tilesetsdata(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.tilesetsdata_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Avalon.Network.Packets.Character.MapInfo.TilesetsData)
}
inline void MapInfo::set_tilesetsdata(int index, const void* value, size_t size) {
  _impl_.tilesetsdata_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Avalon.Network.Packets.Character.MapInfo.TilesetsData)
}
inline std::string* MapInfo::_internal_add_tilesetsdata() {
  return _impl_.tilesetsdata_.Add();
}
inline void MapInfo::add_tilesetsdata(const std::string& value) {
  _impl_.tilesetsdata_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Avalon.Network.Packets.Character.MapInfo.TilesetsData)
}
inline void MapInfo::add_tilesetsdata(std::string&& value) {
  _impl_.tilesetsdata_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Avalon.Network.Packets.Character.MapInfo.TilesetsData)
}
inline void MapInfo::add_tilesetsdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.tilesetsdata_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Avalon.Network.Packets.Character.MapInfo.TilesetsData)
}
inline void MapInfo::add_tilesetsdata(const void* value, size_t size) {
  _impl_.tilesetsdata_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Avalon.Network.Packets.Character.MapInfo.TilesetsData)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MapInfo::tilesetsdata() const {
  // @@protoc_insertion_point(field_list:Avalon.Network.Packets.Character.MapInfo.TilesetsData)
  return _impl_.tilesetsdata_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MapInfo::mutable_tilesetsdata() {
  // @@protoc_insertion_point(field_mutable_list:Avalon.Network.Packets.Character.MapInfo.TilesetsData)
  return &_impl_.tilesetsdata_;
}

// -------------------------------------------------------------------

// SCharacterSelectedPacket

// .Avalon.Network.Packets.Character.CharacterInfo Character = 1;
inline bool SCharacterSelectedPacket::_internal_has_character() const {
  return this != internal_default_instance() && _impl_.character_ != nullptr;
}
inline bool SCharacterSelectedPacket::has_character() const {
  return _internal_has_character();
}
inline const ::Avalon::Network::Packets::Character::CharacterInfo& SCharacterSelectedPacket::_internal_character() const {
  const ::Avalon::Network::Packets::Character::CharacterInfo* p = _impl_.character_;
  return p != nullptr ? *p : reinterpret_cast<const ::Avalon::Network::Packets::Character::CharacterInfo&>(
      ::Avalon::Network::Packets::Character::_CharacterInfo_default_instance_);
}
inline const ::Avalon::Network::Packets::Character::CharacterInfo& SCharacterSelectedPacket::character() const {
  // @@protoc_insertion_point(field_get:Avalon.Network.Packets.Character.SCharacterSelectedPacket.Character)
  return _internal_character();
}
inline void SCharacterSelectedPacket::unsafe_arena_set_allocated_character(
    ::Avalon::Network::Packets::Character::CharacterInfo* character) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.character_);
  }
  _impl_.character_ = character;
  if (character) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Avalon.Network.Packets.Character.SCharacterSelectedPacket.Character)
}
inline ::Avalon::Network::Packets::Character::CharacterInfo* SCharacterSelectedPacket::release_character() {
  
  ::Avalon::Network::Packets::Character::CharacterInfo* temp = _impl_.character_;
  _impl_.character_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Avalon::Network::Packets::Character::CharacterInfo* SCharacterSelectedPacket::unsafe_arena_release_character() {
  // @@protoc_insertion_point(field_release:Avalon.Network.Packets.Character.SCharacterSelectedPacket.Character)
  
  ::Avalon::Network::Packets::Character::CharacterInfo* temp = _impl_.character_;
  _impl_.character_ = nullptr;
  return temp;
}
inline ::Avalon::Network::Packets::Character::CharacterInfo* SCharacterSelectedPacket::_internal_mutable_character() {
  
  if (_impl_.character_ == nullptr) {
    auto* p = CreateMaybeMessage<::Avalon::Network::Packets::Character::CharacterInfo>(GetArenaForAllocation());
    _impl_.character_ = p;
  }
  return _impl_.character_;
}
inline ::Avalon::Network::Packets::Character::CharacterInfo* SCharacterSelectedPacket::mutable_character() {
  ::Avalon::Network::Packets::Character::CharacterInfo* _msg = _internal_mutable_character();
  // @@protoc_insertion_point(field_mutable:Avalon.Network.Packets.Character.SCharacterSelectedPacket.Character)
  return _msg;
}
inline void SCharacterSelectedPacket::set_allocated_character(::Avalon::Network::Packets::Character::CharacterInfo* character) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.character_);
  }
  if (character) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(character));
    if (message_arena != submessage_arena) {
      character = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, character, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.character_ = character;
  // @@protoc_insertion_point(field_set_allocated:Avalon.Network.Packets.Character.SCharacterSelectedPacket.Character)
}

// .Avalon.Network.Packets.Character.MapInfo Map = 2;
inline bool SCharacterSelectedPacket::_internal_has_map() const {
  return this != internal_default_instance() && _impl_.map_ != nullptr;
}
inline bool SCharacterSelectedPacket::has_map() const {
  return _internal_has_map();
}
inline void SCharacterSelectedPacket::clear_map() {
  if (GetArenaForAllocation() == nullptr && _impl_.map_ != nullptr) {
    delete _impl_.map_;
  }
  _impl_.map_ = nullptr;
}
inline const ::Avalon::Network::Packets::Character::MapInfo& SCharacterSelectedPacket::_internal_map() const {
  const ::Avalon::Network::Packets::Character::MapInfo* p = _impl_.map_;
  return p != nullptr ? *p : reinterpret_cast<const ::Avalon::Network::Packets::Character::MapInfo&>(
      ::Avalon::Network::Packets::Character::_MapInfo_default_instance_);
}
inline const ::Avalon::Network::Packets::Character::MapInfo& SCharacterSelectedPacket::map() const {
  // @@protoc_insertion_point(field_get:Avalon.Network.Packets.Character.SCharacterSelectedPacket.Map)
  return _internal_map();
}
inline void SCharacterSelectedPacket::unsafe_arena_set_allocated_map(
    ::Avalon::Network::Packets::Character::MapInfo* map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.map_);
  }
  _impl_.map_ = map;
  if (map) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Avalon.Network.Packets.Character.SCharacterSelectedPacket.Map)
}
inline ::Avalon::Network::Packets::Character::MapInfo* SCharacterSelectedPacket::release_map() {
  
  ::Avalon::Network::Packets::Character::MapInfo* temp = _impl_.map_;
  _impl_.map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Avalon::Network::Packets::Character::MapInfo* SCharacterSelectedPacket::unsafe_arena_release_map() {
  // @@protoc_insertion_point(field_release:Avalon.Network.Packets.Character.SCharacterSelectedPacket.Map)
  
  ::Avalon::Network::Packets::Character::MapInfo* temp = _impl_.map_;
  _impl_.map_ = nullptr;
  return temp;
}
inline ::Avalon::Network::Packets::Character::MapInfo* SCharacterSelectedPacket::_internal_mutable_map() {
  
  if (_impl_.map_ == nullptr) {
    auto* p = CreateMaybeMessage<::Avalon::Network::Packets::Character::MapInfo>(GetArenaForAllocation());
    _impl_.map_ = p;
  }
  return _impl_.map_;
}
inline ::Avalon::Network::Packets::Character::MapInfo* SCharacterSelectedPacket::mutable_map() {
  ::Avalon::Network::Packets::Character::MapInfo* _msg = _internal_mutable_map();
  // @@protoc_insertion_point(field_mutable:Avalon.Network.Packets.Character.SCharacterSelectedPacket.Map)
  return _msg;
}
inline void SCharacterSelectedPacket::set_allocated_map(::Avalon::Network::Packets::Character::MapInfo* map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.map_;
  }
  if (map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(map);
    if (message_arena != submessage_arena) {
      map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.map_ = map;
  // @@protoc_insertion_point(field_set_allocated:Avalon.Network.Packets.Character.SCharacterSelectedPacket.Map)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Character
}  // namespace Packets
}  // namespace Network
}  // namespace Avalon

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_SCharacterSelectedPacket_2eproto
