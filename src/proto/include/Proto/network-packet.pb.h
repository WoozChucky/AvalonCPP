// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: network-packet.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_network_2dpacket_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_network_2dpacket_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_network_2dpacket_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_network_2dpacket_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_network_2dpacket_2eproto;
namespace Avalon {
namespace Network {
namespace Packets {
namespace Abstractions {
class NetworkPacket;
struct NetworkPacketDefaultTypeInternal;
extern NetworkPacketDefaultTypeInternal _NetworkPacket_default_instance_;
class NetworkPacketHeader;
struct NetworkPacketHeaderDefaultTypeInternal;
extern NetworkPacketHeaderDefaultTypeInternal _NetworkPacketHeader_default_instance_;
}  // namespace Abstractions
}  // namespace Packets
}  // namespace Network
}  // namespace Avalon
PROTOBUF_NAMESPACE_OPEN
template<> ::Avalon::Network::Packets::Abstractions::NetworkPacket* Arena::CreateMaybeMessage<::Avalon::Network::Packets::Abstractions::NetworkPacket>(Arena*);
template<> ::Avalon::Network::Packets::Abstractions::NetworkPacketHeader* Arena::CreateMaybeMessage<::Avalon::Network::Packets::Abstractions::NetworkPacketHeader>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Avalon {
namespace Network {
namespace Packets {
namespace Abstractions {

enum NetworkPacketFlags : int {
  None = 0,
  ClearText = 1,
  Handshake = 2,
  Encrypted = 4,
  NetworkPacketFlags_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  NetworkPacketFlags_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool NetworkPacketFlags_IsValid(int value);
constexpr NetworkPacketFlags NetworkPacketFlags_MIN = None;
constexpr NetworkPacketFlags NetworkPacketFlags_MAX = Encrypted;
constexpr int NetworkPacketFlags_ARRAYSIZE = NetworkPacketFlags_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetworkPacketFlags_descriptor();
template<typename T>
inline const std::string& NetworkPacketFlags_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NetworkPacketFlags>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NetworkPacketFlags_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NetworkPacketFlags_descriptor(), enum_t_value);
}
inline bool NetworkPacketFlags_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NetworkPacketFlags* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NetworkPacketFlags>(
    NetworkPacketFlags_descriptor(), name, value);
}
enum NetworkPacketType : int {
  UNKNOWN = 0,
  ERROR = -1,
  CMSG_SERVER_INFO = 4096,
  CMSG_CLIENT_INFO = 4097,
  CMSG_CLIENT_HANDSHAKE = 4098,
  CMSG_AUTH = 8192,
  CMSG_AUTH_PATCH = 8193,
  CMSG_LOGOUT = 8194,
  CMSG_REGISTER = 8195,
  CMSG_AUDIO_RECORD = 8272,
  CMSG_CHARACTER_LIST = 8208,
  CMSG_CHARACTER_CREATE = 8209,
  CMSG_CHARACTER_DELETE = 8210,
  CMSG_CHARACTER_SELECTED = 8211,
  CMSG_CHARACTER_LOADED = 8212,
  CMSG_MAP_TELEPORT = 8224,
  CMSG_QUEST_STATUS = 8256,
  CMSG_QUEST_LIST = 8257,
  CMSG_QUEST_QUERY_AVAILABLE = 8258,
  CMSG_INTERACT = 8240,
  CMSG_REQUEST_SERVER_VERSION = 8225,
  CMSG_REQUEST_LOBBY_LIST = 8195,
  CMSG_MOVEMENT = 8196,
  CMSG_PING = 8197,
  CMSG_PONG = 8198,
  CMSG_CHAT_MESSAGE = 8199,
  CMSG_CHAT_OPEN = 8200,
  CMSG_CHAT_CLOSE = 8201,
  CMSG_GROUP_INVITE_RESULT = 8202,
  SMSG_SERVER_INFO = 12288,
  SMSG_SERVER_HANDSHAKE = 12290,
  SMSG_SERVER_HANDSHAKE_RESULT = 12289,
  SMSG_AUTH_RESULT = 12304,
  SMSG_LOGOUT = 12305,
  SMSG_REGISTER_RESULT = 12306,
  SMSG_AUDIO_RECORD = 12368,
  SMSG_CHARACTER_CONNECTED = 12320,
  SMSG_CHARACTER_DISCONNECTED = 12321,
  SMSG_CHARACTER_LIST = 12323,
  SMSG_CHARACTER_CREATED = 12324,
  SMSG_CHARACTER_DELETED = 12325,
  SMSG_CHARACTER_SELECTED = 12326,
  SMSG_MAP_TELEPORT = 12336,
  SMSG_PONG = 12294,
  SMSG_PING = 12295,
  SMSG_SERVER_VERSION = 12290,
  SMSG_PLAYER_POSITION_UPDATE = 12293,
  SMSG_NPC_UPDATE = 12296,
  SMSG_CHAT_MESSAGE = 12297,
  SMSG_CHAT_OPEN = 12298,
  SMSG_CHAT_CLOSE = 12299,
  SMSG_GROUP_INVITE = 12301,
  SMSG_GROUP_INVITE_RESULT = 12302,
  NetworkPacketType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  NetworkPacketType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool NetworkPacketType_IsValid(int value);
constexpr NetworkPacketType NetworkPacketType_MIN = ERROR;
constexpr NetworkPacketType NetworkPacketType_MAX = SMSG_AUDIO_RECORD;
constexpr int NetworkPacketType_ARRAYSIZE = NetworkPacketType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetworkPacketType_descriptor();
template<typename T>
inline const std::string& NetworkPacketType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NetworkPacketType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NetworkPacketType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NetworkPacketType_descriptor(), enum_t_value);
}
inline bool NetworkPacketType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NetworkPacketType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NetworkPacketType>(
    NetworkPacketType_descriptor(), name, value);
}
enum NetworkProtocol : int {
  Invalid = 0,
  Tcp = 1,
  Udp = 2,
  Both = 3,
  NetworkProtocol_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  NetworkProtocol_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool NetworkProtocol_IsValid(int value);
constexpr NetworkProtocol NetworkProtocol_MIN = Invalid;
constexpr NetworkProtocol NetworkProtocol_MAX = Both;
constexpr int NetworkProtocol_ARRAYSIZE = NetworkProtocol_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetworkProtocol_descriptor();
template<typename T>
inline const std::string& NetworkProtocol_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NetworkProtocol>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NetworkProtocol_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NetworkProtocol_descriptor(), enum_t_value);
}
inline bool NetworkProtocol_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NetworkProtocol* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NetworkProtocol>(
    NetworkProtocol_descriptor(), name, value);
}
// ===================================================================

class NetworkPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Avalon.Network.Packets.Abstractions.NetworkPacket) */ {
 public:
  inline NetworkPacket() : NetworkPacket(nullptr) {}
  ~NetworkPacket() override;
  explicit PROTOBUF_CONSTEXPR NetworkPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetworkPacket(const NetworkPacket& from);
  NetworkPacket(NetworkPacket&& from) noexcept
    : NetworkPacket() {
    *this = ::std::move(from);
  }

  inline NetworkPacket& operator=(const NetworkPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkPacket& operator=(NetworkPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetworkPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetworkPacket* internal_default_instance() {
    return reinterpret_cast<const NetworkPacket*>(
               &_NetworkPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NetworkPacket& a, NetworkPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetworkPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetworkPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetworkPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NetworkPacket& from) {
    NetworkPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Avalon.Network.Packets.Abstractions.NetworkPacket";
  }
  protected:
  explicit NetworkPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // bytes Payload = 2;
  void clear_payload();
  const std::string& payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // .Avalon.Network.Packets.Abstractions.NetworkPacketHeader Header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::Avalon::Network::Packets::Abstractions::NetworkPacketHeader& header() const;
  PROTOBUF_NODISCARD ::Avalon::Network::Packets::Abstractions::NetworkPacketHeader* release_header();
  ::Avalon::Network::Packets::Abstractions::NetworkPacketHeader* mutable_header();
  void set_allocated_header(::Avalon::Network::Packets::Abstractions::NetworkPacketHeader* header);
  private:
  const ::Avalon::Network::Packets::Abstractions::NetworkPacketHeader& _internal_header() const;
  ::Avalon::Network::Packets::Abstractions::NetworkPacketHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::Avalon::Network::Packets::Abstractions::NetworkPacketHeader* header);
  ::Avalon::Network::Packets::Abstractions::NetworkPacketHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:Avalon.Network.Packets.Abstractions.NetworkPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
    ::Avalon::Network::Packets::Abstractions::NetworkPacketHeader* header_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_network_2dpacket_2eproto;
};
// -------------------------------------------------------------------

class NetworkPacketHeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Avalon.Network.Packets.Abstractions.NetworkPacketHeader) */ {
 public:
  inline NetworkPacketHeader() : NetworkPacketHeader(nullptr) {}
  ~NetworkPacketHeader() override;
  explicit PROTOBUF_CONSTEXPR NetworkPacketHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetworkPacketHeader(const NetworkPacketHeader& from);
  NetworkPacketHeader(NetworkPacketHeader&& from) noexcept
    : NetworkPacketHeader() {
    *this = ::std::move(from);
  }

  inline NetworkPacketHeader& operator=(const NetworkPacketHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkPacketHeader& operator=(NetworkPacketHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetworkPacketHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetworkPacketHeader* internal_default_instance() {
    return reinterpret_cast<const NetworkPacketHeader*>(
               &_NetworkPacketHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NetworkPacketHeader& a, NetworkPacketHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkPacketHeader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkPacketHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetworkPacketHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetworkPacketHeader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetworkPacketHeader& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NetworkPacketHeader& from) {
    NetworkPacketHeader::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkPacketHeader* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Avalon.Network.Packets.Abstractions.NetworkPacketHeader";
  }
  protected:
  explicit NetworkPacketHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kFlagsFieldNumber = 2,
    kProtocolFieldNumber = 3,
    kVersionFieldNumber = 4,
  };
  // .Avalon.Network.Packets.Abstractions.NetworkPacketType Type = 1;
  void clear_type();
  ::Avalon::Network::Packets::Abstractions::NetworkPacketType type() const;
  void set_type(::Avalon::Network::Packets::Abstractions::NetworkPacketType value);
  private:
  ::Avalon::Network::Packets::Abstractions::NetworkPacketType _internal_type() const;
  void _internal_set_type(::Avalon::Network::Packets::Abstractions::NetworkPacketType value);
  public:

  // .Avalon.Network.Packets.Abstractions.NetworkPacketFlags Flags = 2;
  void clear_flags();
  ::Avalon::Network::Packets::Abstractions::NetworkPacketFlags flags() const;
  void set_flags(::Avalon::Network::Packets::Abstractions::NetworkPacketFlags value);
  private:
  ::Avalon::Network::Packets::Abstractions::NetworkPacketFlags _internal_flags() const;
  void _internal_set_flags(::Avalon::Network::Packets::Abstractions::NetworkPacketFlags value);
  public:

  // .Avalon.Network.Packets.Abstractions.NetworkProtocol Protocol = 3;
  void clear_protocol();
  ::Avalon::Network::Packets::Abstractions::NetworkProtocol protocol() const;
  void set_protocol(::Avalon::Network::Packets::Abstractions::NetworkProtocol value);
  private:
  ::Avalon::Network::Packets::Abstractions::NetworkProtocol _internal_protocol() const;
  void _internal_set_protocol(::Avalon::Network::Packets::Abstractions::NetworkProtocol value);
  public:

  // int32 Version = 4;
  void clear_version();
  int32_t version() const;
  void set_version(int32_t value);
  private:
  int32_t _internal_version() const;
  void _internal_set_version(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Avalon.Network.Packets.Abstractions.NetworkPacketHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int type_;
    int flags_;
    int protocol_;
    int32_t version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_network_2dpacket_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NetworkPacket

// .Avalon.Network.Packets.Abstractions.NetworkPacketHeader Header = 1;
inline bool NetworkPacket::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool NetworkPacket::has_header() const {
  return _internal_has_header();
}
inline void NetworkPacket::clear_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
}
inline const ::Avalon::Network::Packets::Abstractions::NetworkPacketHeader& NetworkPacket::_internal_header() const {
  const ::Avalon::Network::Packets::Abstractions::NetworkPacketHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::Avalon::Network::Packets::Abstractions::NetworkPacketHeader&>(
      ::Avalon::Network::Packets::Abstractions::_NetworkPacketHeader_default_instance_);
}
inline const ::Avalon::Network::Packets::Abstractions::NetworkPacketHeader& NetworkPacket::header() const {
  // @@protoc_insertion_point(field_get:Avalon.Network.Packets.Abstractions.NetworkPacket.Header)
  return _internal_header();
}
inline void NetworkPacket::unsafe_arena_set_allocated_header(
    ::Avalon::Network::Packets::Abstractions::NetworkPacketHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Avalon.Network.Packets.Abstractions.NetworkPacket.Header)
}
inline ::Avalon::Network::Packets::Abstractions::NetworkPacketHeader* NetworkPacket::release_header() {
  
  ::Avalon::Network::Packets::Abstractions::NetworkPacketHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Avalon::Network::Packets::Abstractions::NetworkPacketHeader* NetworkPacket::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:Avalon.Network.Packets.Abstractions.NetworkPacket.Header)
  
  ::Avalon::Network::Packets::Abstractions::NetworkPacketHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::Avalon::Network::Packets::Abstractions::NetworkPacketHeader* NetworkPacket::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::Avalon::Network::Packets::Abstractions::NetworkPacketHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::Avalon::Network::Packets::Abstractions::NetworkPacketHeader* NetworkPacket::mutable_header() {
  ::Avalon::Network::Packets::Abstractions::NetworkPacketHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:Avalon.Network.Packets.Abstractions.NetworkPacket.Header)
  return _msg;
}
inline void NetworkPacket::set_allocated_header(::Avalon::Network::Packets::Abstractions::NetworkPacketHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:Avalon.Network.Packets.Abstractions.NetworkPacket.Header)
}

// bytes Payload = 2;
inline void NetworkPacket::clear_payload() {
  _impl_.payload_.ClearToEmpty();
}
inline const std::string& NetworkPacket::payload() const {
  // @@protoc_insertion_point(field_get:Avalon.Network.Packets.Abstractions.NetworkPacket.Payload)
  return _internal_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetworkPacket::set_payload(ArgT0&& arg0, ArgT... args) {
 
 _impl_.payload_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Avalon.Network.Packets.Abstractions.NetworkPacket.Payload)
}
inline std::string* NetworkPacket::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:Avalon.Network.Packets.Abstractions.NetworkPacket.Payload)
  return _s;
}
inline const std::string& NetworkPacket::_internal_payload() const {
  return _impl_.payload_.Get();
}
inline void NetworkPacket::_internal_set_payload(const std::string& value) {
  
  _impl_.payload_.Set(value, GetArenaForAllocation());
}
inline std::string* NetworkPacket::_internal_mutable_payload() {
  
  return _impl_.payload_.Mutable(GetArenaForAllocation());
}
inline std::string* NetworkPacket::release_payload() {
  // @@protoc_insertion_point(field_release:Avalon.Network.Packets.Abstractions.NetworkPacket.Payload)
  return _impl_.payload_.Release();
}
inline void NetworkPacket::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  _impl_.payload_.SetAllocated(payload, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.payload_.IsDefault()) {
    _impl_.payload_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Avalon.Network.Packets.Abstractions.NetworkPacket.Payload)
}

// -------------------------------------------------------------------

// NetworkPacketHeader

// .Avalon.Network.Packets.Abstractions.NetworkPacketType Type = 1;
inline void NetworkPacketHeader::clear_type() {
  _impl_.type_ = 0;
}
inline ::Avalon::Network::Packets::Abstractions::NetworkPacketType NetworkPacketHeader::_internal_type() const {
  return static_cast< ::Avalon::Network::Packets::Abstractions::NetworkPacketType >(_impl_.type_);
}
inline ::Avalon::Network::Packets::Abstractions::NetworkPacketType NetworkPacketHeader::type() const {
  // @@protoc_insertion_point(field_get:Avalon.Network.Packets.Abstractions.NetworkPacketHeader.Type)
  return _internal_type();
}
inline void NetworkPacketHeader::_internal_set_type(::Avalon::Network::Packets::Abstractions::NetworkPacketType value) {
  
  _impl_.type_ = value;
}
inline void NetworkPacketHeader::set_type(::Avalon::Network::Packets::Abstractions::NetworkPacketType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Avalon.Network.Packets.Abstractions.NetworkPacketHeader.Type)
}

// .Avalon.Network.Packets.Abstractions.NetworkPacketFlags Flags = 2;
inline void NetworkPacketHeader::clear_flags() {
  _impl_.flags_ = 0;
}
inline ::Avalon::Network::Packets::Abstractions::NetworkPacketFlags NetworkPacketHeader::_internal_flags() const {
  return static_cast< ::Avalon::Network::Packets::Abstractions::NetworkPacketFlags >(_impl_.flags_);
}
inline ::Avalon::Network::Packets::Abstractions::NetworkPacketFlags NetworkPacketHeader::flags() const {
  // @@protoc_insertion_point(field_get:Avalon.Network.Packets.Abstractions.NetworkPacketHeader.Flags)
  return _internal_flags();
}
inline void NetworkPacketHeader::_internal_set_flags(::Avalon::Network::Packets::Abstractions::NetworkPacketFlags value) {
  
  _impl_.flags_ = value;
}
inline void NetworkPacketHeader::set_flags(::Avalon::Network::Packets::Abstractions::NetworkPacketFlags value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:Avalon.Network.Packets.Abstractions.NetworkPacketHeader.Flags)
}

// .Avalon.Network.Packets.Abstractions.NetworkProtocol Protocol = 3;
inline void NetworkPacketHeader::clear_protocol() {
  _impl_.protocol_ = 0;
}
inline ::Avalon::Network::Packets::Abstractions::NetworkProtocol NetworkPacketHeader::_internal_protocol() const {
  return static_cast< ::Avalon::Network::Packets::Abstractions::NetworkProtocol >(_impl_.protocol_);
}
inline ::Avalon::Network::Packets::Abstractions::NetworkProtocol NetworkPacketHeader::protocol() const {
  // @@protoc_insertion_point(field_get:Avalon.Network.Packets.Abstractions.NetworkPacketHeader.Protocol)
  return _internal_protocol();
}
inline void NetworkPacketHeader::_internal_set_protocol(::Avalon::Network::Packets::Abstractions::NetworkProtocol value) {
  
  _impl_.protocol_ = value;
}
inline void NetworkPacketHeader::set_protocol(::Avalon::Network::Packets::Abstractions::NetworkProtocol value) {
  _internal_set_protocol(value);
  // @@protoc_insertion_point(field_set:Avalon.Network.Packets.Abstractions.NetworkPacketHeader.Protocol)
}

// int32 Version = 4;
inline void NetworkPacketHeader::clear_version() {
  _impl_.version_ = 0;
}
inline int32_t NetworkPacketHeader::_internal_version() const {
  return _impl_.version_;
}
inline int32_t NetworkPacketHeader::version() const {
  // @@protoc_insertion_point(field_get:Avalon.Network.Packets.Abstractions.NetworkPacketHeader.Version)
  return _internal_version();
}
inline void NetworkPacketHeader::_internal_set_version(int32_t value) {
  
  _impl_.version_ = value;
}
inline void NetworkPacketHeader::set_version(int32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:Avalon.Network.Packets.Abstractions.NetworkPacketHeader.Version)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Abstractions
}  // namespace Packets
}  // namespace Network
}  // namespace Avalon

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Avalon::Network::Packets::Abstractions::NetworkPacketFlags> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Avalon::Network::Packets::Abstractions::NetworkPacketFlags>() {
  return ::Avalon::Network::Packets::Abstractions::NetworkPacketFlags_descriptor();
}
template <> struct is_proto_enum< ::Avalon::Network::Packets::Abstractions::NetworkPacketType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Avalon::Network::Packets::Abstractions::NetworkPacketType>() {
  return ::Avalon::Network::Packets::Abstractions::NetworkPacketType_descriptor();
}
template <> struct is_proto_enum< ::Avalon::Network::Packets::Abstractions::NetworkProtocol> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Avalon::Network::Packets::Abstractions::NetworkProtocol>() {
  return ::Avalon::Network::Packets::Abstractions::NetworkProtocol_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_network_2dpacket_2eproto
