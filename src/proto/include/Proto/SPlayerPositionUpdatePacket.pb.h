// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SPlayerPositionUpdatePacket.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_SPlayerPositionUpdatePacket_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_SPlayerPositionUpdatePacket_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_SPlayerPositionUpdatePacket_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_SPlayerPositionUpdatePacket_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SPlayerPositionUpdatePacket_2eproto;
namespace Avalon {
namespace Network {
namespace Packets {
namespace Movement {
class SPlayerPacket;
struct SPlayerPacketDefaultTypeInternal;
extern SPlayerPacketDefaultTypeInternal _SPlayerPacket_default_instance_;
class SPlayerPositionUpdatePacket;
struct SPlayerPositionUpdatePacketDefaultTypeInternal;
extern SPlayerPositionUpdatePacketDefaultTypeInternal _SPlayerPositionUpdatePacket_default_instance_;
}  // namespace Movement
}  // namespace Packets
}  // namespace Network
}  // namespace Avalon
PROTOBUF_NAMESPACE_OPEN
template<> ::Avalon::Network::Packets::Movement::SPlayerPacket* Arena::CreateMaybeMessage<::Avalon::Network::Packets::Movement::SPlayerPacket>(Arena*);
template<> ::Avalon::Network::Packets::Movement::SPlayerPositionUpdatePacket* Arena::CreateMaybeMessage<::Avalon::Network::Packets::Movement::SPlayerPositionUpdatePacket>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Avalon {
namespace Network {
namespace Packets {
namespace Movement {

// ===================================================================

class SPlayerPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Avalon.Network.Packets.Movement.SPlayerPacket) */ {
 public:
  inline SPlayerPacket() : SPlayerPacket(nullptr) {}
  ~SPlayerPacket() override;
  explicit PROTOBUF_CONSTEXPR SPlayerPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SPlayerPacket(const SPlayerPacket& from);
  SPlayerPacket(SPlayerPacket&& from) noexcept
    : SPlayerPacket() {
    *this = ::std::move(from);
  }

  inline SPlayerPacket& operator=(const SPlayerPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline SPlayerPacket& operator=(SPlayerPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SPlayerPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const SPlayerPacket* internal_default_instance() {
    return reinterpret_cast<const SPlayerPacket*>(
               &_SPlayerPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SPlayerPacket& a, SPlayerPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(SPlayerPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SPlayerPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SPlayerPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SPlayerPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SPlayerPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SPlayerPacket& from) {
    SPlayerPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SPlayerPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Avalon.Network.Packets.Movement.SPlayerPacket";
  }
  protected:
  explicit SPlayerPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kCharacterIdFieldNumber = 2,
    kPositionXFieldNumber = 3,
    kPositionYFieldNumber = 4,
    kVelocityXFieldNumber = 5,
    kVelocityYFieldNumber = 6,
    kChattingFieldNumber = 7,
    kElapsedFieldNumber = 8,
  };
  // int32 AccountId = 1;
  void clear_accountid();
  int32_t accountid() const;
  void set_accountid(int32_t value);
  private:
  int32_t _internal_accountid() const;
  void _internal_set_accountid(int32_t value);
  public:

  // int32 CharacterId = 2;
  void clear_characterid();
  int32_t characterid() const;
  void set_characterid(int32_t value);
  private:
  int32_t _internal_characterid() const;
  void _internal_set_characterid(int32_t value);
  public:

  // float PositionX = 3;
  void clear_positionx();
  float positionx() const;
  void set_positionx(float value);
  private:
  float _internal_positionx() const;
  void _internal_set_positionx(float value);
  public:

  // float PositionY = 4;
  void clear_positiony();
  float positiony() const;
  void set_positiony(float value);
  private:
  float _internal_positiony() const;
  void _internal_set_positiony(float value);
  public:

  // float VelocityX = 5;
  void clear_velocityx();
  float velocityx() const;
  void set_velocityx(float value);
  private:
  float _internal_velocityx() const;
  void _internal_set_velocityx(float value);
  public:

  // float VelocityY = 6;
  void clear_velocityy();
  float velocityy() const;
  void set_velocityy(float value);
  private:
  float _internal_velocityy() const;
  void _internal_set_velocityy(float value);
  public:

  // bool Chatting = 7;
  void clear_chatting();
  bool chatting() const;
  void set_chatting(bool value);
  private:
  bool _internal_chatting() const;
  void _internal_set_chatting(bool value);
  public:

  // float Elapsed = 8;
  void clear_elapsed();
  float elapsed() const;
  void set_elapsed(float value);
  private:
  float _internal_elapsed() const;
  void _internal_set_elapsed(float value);
  public:

  // @@protoc_insertion_point(class_scope:Avalon.Network.Packets.Movement.SPlayerPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t accountid_;
    int32_t characterid_;
    float positionx_;
    float positiony_;
    float velocityx_;
    float velocityy_;
    bool chatting_;
    float elapsed_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_SPlayerPositionUpdatePacket_2eproto;
};
// -------------------------------------------------------------------

class SPlayerPositionUpdatePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Avalon.Network.Packets.Movement.SPlayerPositionUpdatePacket) */ {
 public:
  inline SPlayerPositionUpdatePacket() : SPlayerPositionUpdatePacket(nullptr) {}
  ~SPlayerPositionUpdatePacket() override;
  explicit PROTOBUF_CONSTEXPR SPlayerPositionUpdatePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SPlayerPositionUpdatePacket(const SPlayerPositionUpdatePacket& from);
  SPlayerPositionUpdatePacket(SPlayerPositionUpdatePacket&& from) noexcept
    : SPlayerPositionUpdatePacket() {
    *this = ::std::move(from);
  }

  inline SPlayerPositionUpdatePacket& operator=(const SPlayerPositionUpdatePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline SPlayerPositionUpdatePacket& operator=(SPlayerPositionUpdatePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SPlayerPositionUpdatePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const SPlayerPositionUpdatePacket* internal_default_instance() {
    return reinterpret_cast<const SPlayerPositionUpdatePacket*>(
               &_SPlayerPositionUpdatePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SPlayerPositionUpdatePacket& a, SPlayerPositionUpdatePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(SPlayerPositionUpdatePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SPlayerPositionUpdatePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SPlayerPositionUpdatePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SPlayerPositionUpdatePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SPlayerPositionUpdatePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SPlayerPositionUpdatePacket& from) {
    SPlayerPositionUpdatePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SPlayerPositionUpdatePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Avalon.Network.Packets.Movement.SPlayerPositionUpdatePacket";
  }
  protected:
  explicit SPlayerPositionUpdatePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 1,
  };
  // repeated .Avalon.Network.Packets.Movement.SPlayerPacket Players = 1;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::Avalon::Network::Packets::Movement::SPlayerPacket* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Avalon::Network::Packets::Movement::SPlayerPacket >*
      mutable_players();
  private:
  const ::Avalon::Network::Packets::Movement::SPlayerPacket& _internal_players(int index) const;
  ::Avalon::Network::Packets::Movement::SPlayerPacket* _internal_add_players();
  public:
  const ::Avalon::Network::Packets::Movement::SPlayerPacket& players(int index) const;
  ::Avalon::Network::Packets::Movement::SPlayerPacket* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Avalon::Network::Packets::Movement::SPlayerPacket >&
      players() const;

  // @@protoc_insertion_point(class_scope:Avalon.Network.Packets.Movement.SPlayerPositionUpdatePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Avalon::Network::Packets::Movement::SPlayerPacket > players_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_SPlayerPositionUpdatePacket_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SPlayerPacket

// int32 AccountId = 1;
inline void SPlayerPacket::clear_accountid() {
  _impl_.accountid_ = 0;
}
inline int32_t SPlayerPacket::_internal_accountid() const {
  return _impl_.accountid_;
}
inline int32_t SPlayerPacket::accountid() const {
  // @@protoc_insertion_point(field_get:Avalon.Network.Packets.Movement.SPlayerPacket.AccountId)
  return _internal_accountid();
}
inline void SPlayerPacket::_internal_set_accountid(int32_t value) {
  
  _impl_.accountid_ = value;
}
inline void SPlayerPacket::set_accountid(int32_t value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:Avalon.Network.Packets.Movement.SPlayerPacket.AccountId)
}

// int32 CharacterId = 2;
inline void SPlayerPacket::clear_characterid() {
  _impl_.characterid_ = 0;
}
inline int32_t SPlayerPacket::_internal_characterid() const {
  return _impl_.characterid_;
}
inline int32_t SPlayerPacket::characterid() const {
  // @@protoc_insertion_point(field_get:Avalon.Network.Packets.Movement.SPlayerPacket.CharacterId)
  return _internal_characterid();
}
inline void SPlayerPacket::_internal_set_characterid(int32_t value) {
  
  _impl_.characterid_ = value;
}
inline void SPlayerPacket::set_characterid(int32_t value) {
  _internal_set_characterid(value);
  // @@protoc_insertion_point(field_set:Avalon.Network.Packets.Movement.SPlayerPacket.CharacterId)
}

// float PositionX = 3;
inline void SPlayerPacket::clear_positionx() {
  _impl_.positionx_ = 0;
}
inline float SPlayerPacket::_internal_positionx() const {
  return _impl_.positionx_;
}
inline float SPlayerPacket::positionx() const {
  // @@protoc_insertion_point(field_get:Avalon.Network.Packets.Movement.SPlayerPacket.PositionX)
  return _internal_positionx();
}
inline void SPlayerPacket::_internal_set_positionx(float value) {
  
  _impl_.positionx_ = value;
}
inline void SPlayerPacket::set_positionx(float value) {
  _internal_set_positionx(value);
  // @@protoc_insertion_point(field_set:Avalon.Network.Packets.Movement.SPlayerPacket.PositionX)
}

// float PositionY = 4;
inline void SPlayerPacket::clear_positiony() {
  _impl_.positiony_ = 0;
}
inline float SPlayerPacket::_internal_positiony() const {
  return _impl_.positiony_;
}
inline float SPlayerPacket::positiony() const {
  // @@protoc_insertion_point(field_get:Avalon.Network.Packets.Movement.SPlayerPacket.PositionY)
  return _internal_positiony();
}
inline void SPlayerPacket::_internal_set_positiony(float value) {
  
  _impl_.positiony_ = value;
}
inline void SPlayerPacket::set_positiony(float value) {
  _internal_set_positiony(value);
  // @@protoc_insertion_point(field_set:Avalon.Network.Packets.Movement.SPlayerPacket.PositionY)
}

// float VelocityX = 5;
inline void SPlayerPacket::clear_velocityx() {
  _impl_.velocityx_ = 0;
}
inline float SPlayerPacket::_internal_velocityx() const {
  return _impl_.velocityx_;
}
inline float SPlayerPacket::velocityx() const {
  // @@protoc_insertion_point(field_get:Avalon.Network.Packets.Movement.SPlayerPacket.VelocityX)
  return _internal_velocityx();
}
inline void SPlayerPacket::_internal_set_velocityx(float value) {
  
  _impl_.velocityx_ = value;
}
inline void SPlayerPacket::set_velocityx(float value) {
  _internal_set_velocityx(value);
  // @@protoc_insertion_point(field_set:Avalon.Network.Packets.Movement.SPlayerPacket.VelocityX)
}

// float VelocityY = 6;
inline void SPlayerPacket::clear_velocityy() {
  _impl_.velocityy_ = 0;
}
inline float SPlayerPacket::_internal_velocityy() const {
  return _impl_.velocityy_;
}
inline float SPlayerPacket::velocityy() const {
  // @@protoc_insertion_point(field_get:Avalon.Network.Packets.Movement.SPlayerPacket.VelocityY)
  return _internal_velocityy();
}
inline void SPlayerPacket::_internal_set_velocityy(float value) {
  
  _impl_.velocityy_ = value;
}
inline void SPlayerPacket::set_velocityy(float value) {
  _internal_set_velocityy(value);
  // @@protoc_insertion_point(field_set:Avalon.Network.Packets.Movement.SPlayerPacket.VelocityY)
}

// bool Chatting = 7;
inline void SPlayerPacket::clear_chatting() {
  _impl_.chatting_ = false;
}
inline bool SPlayerPacket::_internal_chatting() const {
  return _impl_.chatting_;
}
inline bool SPlayerPacket::chatting() const {
  // @@protoc_insertion_point(field_get:Avalon.Network.Packets.Movement.SPlayerPacket.Chatting)
  return _internal_chatting();
}
inline void SPlayerPacket::_internal_set_chatting(bool value) {
  
  _impl_.chatting_ = value;
}
inline void SPlayerPacket::set_chatting(bool value) {
  _internal_set_chatting(value);
  // @@protoc_insertion_point(field_set:Avalon.Network.Packets.Movement.SPlayerPacket.Chatting)
}

// float Elapsed = 8;
inline void SPlayerPacket::clear_elapsed() {
  _impl_.elapsed_ = 0;
}
inline float SPlayerPacket::_internal_elapsed() const {
  return _impl_.elapsed_;
}
inline float SPlayerPacket::elapsed() const {
  // @@protoc_insertion_point(field_get:Avalon.Network.Packets.Movement.SPlayerPacket.Elapsed)
  return _internal_elapsed();
}
inline void SPlayerPacket::_internal_set_elapsed(float value) {
  
  _impl_.elapsed_ = value;
}
inline void SPlayerPacket::set_elapsed(float value) {
  _internal_set_elapsed(value);
  // @@protoc_insertion_point(field_set:Avalon.Network.Packets.Movement.SPlayerPacket.Elapsed)
}

// -------------------------------------------------------------------

// SPlayerPositionUpdatePacket

// repeated .Avalon.Network.Packets.Movement.SPlayerPacket Players = 1;
inline int SPlayerPositionUpdatePacket::_internal_players_size() const {
  return _impl_.players_.size();
}
inline int SPlayerPositionUpdatePacket::players_size() const {
  return _internal_players_size();
}
inline void SPlayerPositionUpdatePacket::clear_players() {
  _impl_.players_.Clear();
}
inline ::Avalon::Network::Packets::Movement::SPlayerPacket* SPlayerPositionUpdatePacket::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:Avalon.Network.Packets.Movement.SPlayerPositionUpdatePacket.Players)
  return _impl_.players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Avalon::Network::Packets::Movement::SPlayerPacket >*
SPlayerPositionUpdatePacket::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:Avalon.Network.Packets.Movement.SPlayerPositionUpdatePacket.Players)
  return &_impl_.players_;
}
inline const ::Avalon::Network::Packets::Movement::SPlayerPacket& SPlayerPositionUpdatePacket::_internal_players(int index) const {
  return _impl_.players_.Get(index);
}
inline const ::Avalon::Network::Packets::Movement::SPlayerPacket& SPlayerPositionUpdatePacket::players(int index) const {
  // @@protoc_insertion_point(field_get:Avalon.Network.Packets.Movement.SPlayerPositionUpdatePacket.Players)
  return _internal_players(index);
}
inline ::Avalon::Network::Packets::Movement::SPlayerPacket* SPlayerPositionUpdatePacket::_internal_add_players() {
  return _impl_.players_.Add();
}
inline ::Avalon::Network::Packets::Movement::SPlayerPacket* SPlayerPositionUpdatePacket::add_players() {
  ::Avalon::Network::Packets::Movement::SPlayerPacket* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:Avalon.Network.Packets.Movement.SPlayerPositionUpdatePacket.Players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Avalon::Network::Packets::Movement::SPlayerPacket >&
SPlayerPositionUpdatePacket::players() const {
  // @@protoc_insertion_point(field_list:Avalon.Network.Packets.Movement.SPlayerPositionUpdatePacket.Players)
  return _impl_.players_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Movement
}  // namespace Packets
}  // namespace Network
}  // namespace Avalon

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_SPlayerPositionUpdatePacket_2eproto
